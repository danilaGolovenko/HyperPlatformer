using System.Collections.Generic;namespace HECSFramework.Core{	public partial class HECSDocumentation	{		public HECSDocumentation()		{			Documentations = new List<DocumentationRepresentation>			{				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Attributes",					},					Comments = new string[]					{						"We should add this attribute when we need include private field to serialization, and this class should be partial for that ",					},					DataType = "PartialSerializeFieldAttribute",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",						"Visual",						"Poolable",					},					Comments = new string[]					{						"Main monobeh component for tagging poolable viewPoolingSystem",					},					DataType = "PoolableMonoComponent",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"AI",						"Strategy",						"AI",						"Strategy",						"Strategy",					},					Comments = new string[]					{						"эта нода для стейтов, для стратегий должна использоваться нода Strategy Complete",						"Это нода пустышка которую мы ставим в конце цепочки для того чтобы не проверять на налл каждую следующую ноду, отличает от Complete ноды тем, что также содержит дебаг функционал для стака выполнения стейта",						"Это базовая нода, она логирует в отдельный компонент ноды по которым мы проходимся в стратегии",					},					DataType = "ChainEnd",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Strategy",						"Strategy",					},					Comments = new string[]					{						"Эта нода завершения стратегии, она посылает команду перезапуска стратегии, если нужно чтобы стратегия не перезапускалась - нужна другая нода",						"Это базовая нода, она логирует в отдельный компонент ноды по которым мы проходимся в стратегии",					},					DataType = "CompleteFinalNode",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Strategy",					},					Comments = new string[]					{						"Это базовая нода, она логирует в отдельный компонент ноды по которым мы проходимся в стратегии",					},					DataType = "LogNode",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Strategy",						"AI",					},					Comments = new string[]					{						"Это подвид стратегии - FSM",					},					DataType = "State",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"Это корневой объект для визуального редактора Decision Tree",					},					DataType = "Strategy",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Abilities",					},					Comments = new string[]					{						"active abilities are those that are triggered every time on demand, or have an effect over time",					},					DataType = "ExecuteAbilityCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Abilities",					},					Comments = new string[]					{						"Passive abilities are those that are performed only once, when you add them them",					},					DataType = "ExecutePassiveAbilityCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",						"HECS",					},					Comments = new string[]					{						"This is for cases when we need checkout animation through many cycles, not only one cycle",					},					DataType = "AnimationCycleCheckout",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",						"HECS",					},					Comments = new string[]					{						"We send this command when we need to know when animation will be done, we take this command from AnimationCheckOutsHolderComponent",					},					DataType = "AnimationDoneCheckOut",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",					},					Comments = new string[]					{						"this command set bool parameter atAnimatorStateComponent",					},					DataType = "BoolAnimationCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",					},					Comments = new string[]					{						"this command set float parameter atAnimatorStateComponent",					},					DataType = "FloatAnimationCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",					},					Comments = new string[]					{						"animation command for int parameters",					},					DataType = "IntAnimationCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",					},					Comments = new string[]					{						"this command set bool parameter atAnimatorStateComponent",					},					DataType = "TriggerAnimationCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Character",					},					Comments = new string[]					{						"Команда которую мы отправляем локально у актора, что он мертв",					},					DataType = "IsDeadCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"The command in which we set the timer, and callback with Character when the timer expires",					},					DataType = "WaitAndEntityCallbackCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"The command in which we set the timer, and call when the timer expires",					},					DataType = "WaitAndCallbackCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Modifiers",					},					Comments = new string[]					{						"Add Modifier local command",					},					DataType = "AddCounterModifierCommand`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Counters",					},					Comments = new string[]					{						"This command represent diff after modifying counter",					},					DataType = "DiffCounterCommand`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Counters",						"Modifiers",					},					Comments = new string[]					{						"Command for remove modifier",					},					DataType = "RemoveCounterModifierCommand`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"NPC",						"AI",					},					Comments = new string[]					{						"Этой командой мы изменяем в целом стратегию поведения у нпс",					},					DataType = "ChangeStrategyCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"AI",						"Strategy",					},					Comments = new string[]					{						"Forcing ai to start, remove stop and set is need decision",					},					DataType = "ForceStartAICommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"AI",						"Strategy",					},					Comments = new string[]					{						"Forcing ai to stop",					},					DataType = "ForceStopAICommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"AI",						"Strategy",					},					Comments = new string[]					{						"this command we send from strategy node CompleteFinalNodeand wait new decision result (start new strategy for example)AINPCSystem",					},					DataType = "NeedDecisionCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Animation",					},					Comments = new string[]					{						"We send this command from animator event to Actor",					},					DataType = "AnimationEventCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Animation",					},					Comments = new string[]					{						"We send this command from animator event to Actor, this command contains state id",					},					DataType = "EventStateAnimationCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Visual",					},					Comments = new string[]					{						"this command announce  - view ready, after instatiate view and inject actor",					},					DataType = "ViewReadyCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Physics",						"Provider",					},					Comments = new string[]					{						"Provide collision from monobeh to actor",					},					DataType = "CollisionCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Physics",						"Provider",					},					Comments = new string[]					{						"Provide 2d collision from monobeh to actor",					},					DataType = "Collision2dCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Physics",						"Provider",					},					Comments = new string[]					{						"Provide exit collision from monobeh to actor",					},					DataType = "CollisionExitCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Physics",						"Provider",					},					Comments = new string[]					{						"Provide exit collision from monobeh to actor",					},					DataType = "Collision2dExitCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Input",					},					Comments = new string[]					{						"Обозначает нажатие на кнопку (или что-то другое в зависимости от конфигурации InputAction)",					},					DataType = "InputStartedCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Input",					},					Comments = new string[]					{						"Обозначает отпускание кнопки (или что-то другое в зависимости от конфигурации InputAction)",					},					DataType = "InputEndedCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Input",					},					Comments = new string[]					{						"Обозначает удерживание кнопки (или что-то другое в зависимости от конфигурации InputAction)",					},					DataType = "InputCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Audio",					},					Comments = new string[]					{						"command to play sound",					},					DataType = "PlaySoundCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Audio",					},					Comments = new string[]					{						"command to stop sound",					},					DataType = "StopSoundCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Physics",						"Provider",					},					Comments = new string[]					{						"Provide trigger event from monobeh to actor",					},					DataType = "TriggerEnterCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Physics",						"Provider",					},					Comments = new string[]					{						"Provide trigger exit event from monobeh to actor",					},					DataType = "TriggerExitCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Physics",						"Provider",					},					Comments = new string[]					{						"Provide trigger event from monobeh to actor",					},					DataType = "Trigger2dEnterCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Physics",						"Provider",					},					Comments = new string[]					{						"Provide trigger exit event from monobeh to actor",					},					DataType = "Trigger2dExitCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"UI",					},					Comments = new string[]					{						"�������� ���� UI ����� ����������",					},					DataType = "HideAllUIExceptCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"UI",					},					Comments = new string[]					{						"Its core ui command, we send it for asking hide ui widget",					},					DataType = "HideUICommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"UI",					},					Comments = new string[]					{						"??????? ??????? ??????? ??? ???? ?????? ???? ??? ????? ??????????, ?????????????? ? ????????? ??????? ?? ? UISystem",					},					DataType = "ShowUIAndHideOthersCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"UI",					},					Comments = new string[]					{						"Команда которая отвечает за показ или скрытие группы UI",					},					DataType = "UIGroupCommand",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Abilities",						"HECS",					},					Comments = new string[]					{						"Main system for operating abilities",					},					DataType = "AbilitiesSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Abilities",						"HECS",					},					Comments = new string[]					{						"This system execute all abilities on ability holder, its usable if we have composite ability concept - ability what use damage and freeze effect same time, then we need create ability for each effect and run them through this system",					},					DataType = "CompositeAbilitiesSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Counters",					},					Comments = new string[]					{						"System for operating counters on this entity, process changes of values and add|remove modifiers to modifiable counters",					},					DataType = "CountersHolderSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Server",						"GameLogic",					},					Comments = new string[]					{						"This system for update awaiters, she should be only on server world, and init from main server thread",					},					DataType = "JobUpdateSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"Эта система живет в самом мире, отвечает за то что после всех апдейтов вызовется эта система, и почистит ентити которые мы просим удалить",					},					DataType = "DestroyEntityWorldSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Serialization",						"GameLogic",						"HECS",					},					Comments = new string[]					{						"this part of pooling system have responsibility for pooling of thread safe  component copy processor",						"Global pooling system, contains pooling views, containers, actors",					},					DataType = "PoolingSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"Эта система живет в самом мире, отвечает за то что после всех апдейтов вызовется эта система, и почистит ентити которые мы просим удалить",					},					DataType = "RemoveComponentWorldSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"AI",						"Strategy",						"State",						"HECS",					},					Comments = new string[]					{						"это глобальная система которая отвечает за апдейт состояний",					},					DataType = "StateUpdateSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",						"AI",						"Strategy",					},					Comments = new string[]					{						"Эта система живет  мире и добавляется через парт часть гейм контроллера, она отвечает за поддержку глобальной логики для стратегий",					},					DataType = "StrategiesMainServiceSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"NPC",						"AI",						"HECS",					},					Comments = new string[]					{						"This is default system for operate strategies on NPC",					},					DataType = "AINPCSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",						"HECS",					},					Comments = new string[]					{						"This system check when animation done, this system need check animations holder component, and system have double checkup - 1 animation from event, 2 - timer for this animation, its not global system bcz we need check events from animator",					},					DataType = "AnimationDoneCheckOutSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",					},					Comments = new string[]					{						"System accept commands and set values in AnimationStateComponent by index",					},					DataType = "AnimationSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Input",					},					Comments = new string[]					{						"Система прослушивает юнити инпут и передаёт данные в хекс системы и компоненты.",					},					DataType = "InputListenSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Visual",					},					Comments = new string[]					{						"this system spawn view to actor and report when spawn view complete",					},					DataType = "SpawnViewSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",						"HECS",						"Actor",					},					Comments = new string[]					{						"System for update actor position from transform component",					},					DataType = "UpdateActorByTranformSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",						"Actor",						"HECS",					},					Comments = new string[]					{						"This system update transform component from actor's transform",					},					DataType = "UpdateTranformFromActorSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Audio",						"Global",						"HECS",					},					Comments = new string[]					{						"Default sound solution for HECS, its all about 2d sound on this moment",					},					DataType = "SoundGlobalSystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"UI",					},					Comments = new string[]					{						"This system destroy ui on hide command",					},					DataType = "HideUISystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"UI",						"HECS",					},					Comments = new string[]					{						"This system default for operating ui at hecs, this system have command for show and hide ui plus show or hide ui groups, this system still in progress",					},					DataType = "UISystem",					DocumentationType = DocumentationType.System,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"NONE",					},					Comments = new string[]					{					},					DataType = "JumpForceComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"NONE",					},					Comments = new string[]					{					},					DataType = "JumpingComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Abilities",						"Tag",						"HECS",					},					Comments = new string[]					{						"This is an ability tag, we add it to the ability container",					},					DataType = "AbilityTagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Abilities",						"Tag",					},					Comments = new string[]					{						"Mark for passive abilities",					},					DataType = "PassiveAbilityTag",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Abilities",					},					Comments = new string[]					{						"This component holds current|default abilities, we operate this throw abilitis system",					},					DataType = "AbilitiesHolderComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",					},					Comments = new string[]					{						"this component holds animations scenarios with timings ",					},					DataType = "ScenarioAnimationComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Abilities",						"HECS",					},					Comments = new string[]					{						"This component is required for the ability, the character that owns it is thrown into the owner",					},					DataType = "AbilityOwnerComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Abilities",					},					Comments = new string[]					{						"Компонент в котором хранятся предикаты для абилки, цели абилки, и для владельца абилки",					},					DataType = "AbilityPredicateComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"Компонент в котором мы храним версию",					},					DataType = "AppVersionComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"Интерфейс которым помечаем компоненты и системы которые остаются жить после смерти ентити",					},					DataType = "IAfterLife",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"Компонент который отмечает ентити которые надо пулить, по дефолту используюется в Unity части",					},					DataType = "PoolableTagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Abilities",						"Predicates",					},					Comments = new string[]					{						"predicates for abilities",					},					DataType = "PredicatesComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Counters",					},					Comments = new string[]					{						"This component holds counters from this entity, counters should have processing from CountersHolderSystem",					},					DataType = "CountersHolderComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Counters",					},					Comments = new string[]					{						"this component is base for all counters components with modifiable values. this component holds modifier container",					},					DataType = "ModifiableFloatCounterComponent",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Counters",					},					Comments = new string[]					{						"this component is base for all counters components with modifiable values. this component holds modifier container",					},					DataType = "ModifiableIntCounterComponent",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",						"HECS",					},					Comments = new string[]					{						"This component holds serialized state of animator, you need to set the animator parameters through this component",					},					DataType = "AnimatorStateComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Test",					},					Comments = new string[]					{						"test component for all kind of serialization here",					},					DataType = "TestSerializationComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Serialization",					},					Comments = new string[]					{						"We mark components whom need to be in save file",					},					DataType = "ISavebleComponent",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"NPC",						"AI",						"Strategy",					},					Comments = new string[]					{						"Компонент который содержит в себе стратегию поведения моба и дефолтный стейт",					},					DataType = "AIStrategyComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Tag",						"AI",						"State",					},					Comments = new string[]					{						"Это компонент всю ключевую информацию про состояние персонажа",					},					DataType = "StateContextComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"AI",						"Strategy",						"State",					},					Comments = new string[]					{						"Это основной компонент стейта, он содержит сущности которые сейчас находятся в этом стейте, этот компонент лежит внутри ентити внутри State",					},					DataType = "StateDataComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"AI",						"Strategy",						"State",						"Debug",					},					Comments = new string[]					{						"Компонент который вешается на ентити которая участвует в данном стейте, нужен для дебага",					},					DataType = "StateInfoComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Animation",					},					Comments = new string[]					{						"This component holds needed animation info checkouts",					},					DataType = "AnimationCheckOutsHolderComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Animation",					},					Comments = new string[]					{						"This component override animations, but u should run  SetupOverrideAnimator() manualy, because in some cases we have view with animator later then actor ",					},					DataType = "OverrideAnimatorComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Visual",						"Animation",						"Tag",					},					Comments = new string[]					{						"we mark entity with this component when we should setup view logic after view complete",					},					DataType = "SetupAfterViewTagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"Этим компонентом мы отмечаем актора который уже прожил AfterLife",					},					DataType = "AfterLifeCompleteTagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"Это тэг актора, которому еще надо отработать некоторое время после смерти, обрабатывается в юнити части системы DestroyEntityWorldSystem",					},					DataType = "AfterLifeTagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Input",					},					Comments = new string[]					{						"this component provide input actions for InputSystem, u can take ",					},					DataType = "InputActionsComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Input",					},					Comments = new string[]					{						"Глобальная система рассылает ввод всем, кто имеет данный тэг",					},					DataType = "InputListenerTagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"UI",					},					Comments = new string[]					{						"The tag component, which we hang on the UI and thus designate belonging to which group, can contain several tags",					},					DataType = "UIGroupTagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Actor",					},					Comments = new string[]					{						"This component provide access to unity rect transform, if this entity not actor, this component remove self",					},					DataType = "UnityRectTransformComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Actor",					},					Comments = new string[]					{						"This component provide access to unity transform, if this entity not actor, this component remove self",					},					DataType = "UnityTransformComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Tag",					},					Comments = new string[]					{						"Энтити помеченные этим тегом при уничтожении сохраняют свою вьюху в течение указанного промежутка времени",					},					DataType = "ViewDestructionDelayedComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Sound",					},					Comments = new string[]					{						"This holds volume settings for music and fx",					},					DataType = "SoundVolumeComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"UI",						"Tag",					},					Comments = new string[]					{						"This component holds identifier for additional canvases, we use this canvases for optimisation or drawing purpose",					},					DataType = "AdditionalCanvasTagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"UI",						"Tag",					},					Comments = new string[]					{						"This component marks main canvas for placing ui",					},					DataType = "MainCanvasTagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"UI",						"Tag",					},					Comments = new string[]					{						"this components marks ui and provide identifier info for this ui",					},					DataType = "UITagComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Actor",						"Character",					},					Comments = new string[]					{						"этот компонент содержит в себе сохранённые данные о позиции и вращении актора, это сделано чтобы отделить эти данные от существования трансформы",					},					DataType = "SavePositionComponent",					DocumentationType = DocumentationType.Component,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Animation",					},					Comments = new string[]					{						"this component holds animation state and links identifiers id to AnimatorHashID",					},					DataType = "AnimatorState",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Abilities",					},					Comments = new string[]					{						"Basic system for active abilities, which are launched every time on demand, through receiving a command",					},					DataType = "BaseAbilitySystem",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Abilities",					},					Comments = new string[]					{						"Basic system for passive abilities, they are launched through the command only at the stage of adding, 1 time",					},					DataType = "BasePassiveAbilitySystem",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Helpers",					},					Comments = new string[]					{						"This is helper object for safely removing elements from concurrency list, u add on iteration elements to remove, and after iteration call method - process removing",					},					DataType = "Remover`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Helpers",					},					Comments = new string[]					{						"This is helper object for safely removing or adding elements from concurrency list, u add on iteration elements to remove, and after iteration call method - Process",					},					DataType = "AddAndRemoveHelper`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",						"HECS",					},					Comments = new string[]					{						"Это старая реализация, где мы глобально подписываемся на все компоненты подряд",					},					DataType = "ComponentsService",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"Это новая реализация, тут мы подписываемся на конкретный глобальный компонент, это происходит через реализацию в системе IReactComponentGlobal<T>",					},					DataType = "GlobalComponentListenersService",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"Это новая реализация, тут мы подписываемся на конкретный локальный компонент, это происходит через реализацию в системе IReactComponentLocal<T>",					},					DataType = "LocalComponentListenersService",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Global",					},					Comments = new string[]					{						"Main update system, have many modules, every program tick passes through this object, every world have own instance of this system",					},					DataType = "GlobalUpdateSystem",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"we need this structure when we add or get component, but want put here info, and after add this component to entity",					},					DataType = "GetAndSetComponent`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Baking",					},					Comments = new string[]					{						"This interface we using for transfering data to server for example, we run this interface on baking process, on realization of this interface we should gather data from enviroment",					},					DataType = "IBake",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Baking",					},					Comments = new string[]					{						"This interface we using for transfering data to server for example, we run this interface before main baking process, on realization of this interface we should gather data from enviroment",					},					DataType = "IPreBake",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"Interface tag for singleton components at the world",					},					DataType = "IWorldSingleComponent",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"this interface provide subscribe to event  - add or remove any component in world",					},					DataType = "IReactComponent",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"this interface provide subscribe to event  - add or remove any component on local entity",					},					DataType = "IReactComponentLocal",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"the implementation of this interface in the system allows you to find out the add or removal of a component of a particular type on the current entity",					},					DataType = "IReactComponentLocal`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"the implementation of this interface in the system allows you react to adding or removal of any component of a particular type on the current world",					},					DataType = "IReactComponentGlobal`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"its microsoft object pooler, u can use it for pool c# objects",					},					DataType = "ObjectPool`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",						"Strategy",					},					Comments = new string[]					{						"Этот кусочек бейз контроллера содержит базовые системы для общей логики стратегий",					},					DataType = "BaseGameController",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"HECS",					},					Comments = new string[]					{						"This is reference container for actor containers, if u need reference container for ur own containers, u should make another class with generic param",						"This is base for all reference containers, reference container also contain references to other containers, and init entity from itself first and after init from references",					},					DataType = "ActorReferenceContainer",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"This is base for all reference containers, reference container also contain references to other containers, and init entity from itself first and after init from references",					},					DataType = "ReferenceContainerBase`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",						"HECS",					},					Comments = new string[]					{						"Animator State Identifer, using for override animation on this state",					},					DataType = "AnimatorStateIdentifier",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Animation",						"HECS",					},					Comments = new string[]					{						"Here we gather info when we need to check if animation done, we save here time and id event from animation clip",					},					DataType = "AnimationDoneCheckOutInfo",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Helpers",						"Editor",					},					Comments = new string[]					{						"helpers for addressables editors funcs",					},					DataType = "AddressablesHelpers",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",						"Player",					},					Comments = new string[]					{						"Хелпер который отвечает за сохранение и чтение файлов",					},					DataType = "SaveManager",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",					},					Comments = new string[]					{						"This helper load location to world",					},					DataType = "WorldHelpers",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"GameLogic",					},					Comments = new string[]					{						"Интерфейс которым помечаем монобех компоненты которые запускаем после смерти актора",					},					DataType = "IAfterLifeAction",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Helpers",					},					Comments = new string[]					{						"this helper gather all SO of needed type and return IEnumerable, its useful for drop down menus",					},					DataType = "SOProvider`1",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"Editor",						"HECS",						"UI",					},					Comments = new string[]					{						"Its helper for create ui, this window create ui identifier, ui blueprint, and set ui actor to prfb if needed, after this ui blueprint and uiactor will be added to addressables",					},					DataType = "CreateUIHelperWindow",					DocumentationType = DocumentationType.Common,				},				new DocumentationRepresentation				{					SegmentTypes = new string[]					{						"HECS",						"Animation",						"Editor",					},					Comments = new string[]					{						"Window for generate Animator helpers",					},					DataType = "BakeAnimatorsWindow",					DocumentationType = DocumentationType.Common,				},			};		}	}}