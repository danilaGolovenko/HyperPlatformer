using System.Collections.Generic;using Components;using System;using Systems;namespace HECSFramework.Core{	public sealed class CatchesListComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetCatchesListComponent = (CatchesListComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetCatchesListComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetCatchesListComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetCatchesListComponent(), isAdded);		}	}	public sealed class CurrentSpeedComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetCurrentSpeedComponent = (CurrentSpeedComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetCurrentSpeedComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetCurrentSpeedComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetCurrentSpeedComponent(), isAdded);		}	}	public sealed class DamageAmountComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetDamageAmountComponent = (DamageAmountComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetDamageAmountComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetDamageAmountComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetDamageAmountComponent(), isAdded);		}	}	public sealed class EnemyContainerComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetEnemyContainerComponent = (EnemyContainerComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetEnemyContainerComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetEnemyContainerComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetEnemyContainerComponent(), isAdded);		}	}	public sealed class EntityHolderComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetEntityHolderComponent = (EntityHolderComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetEntityHolderComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetEntityHolderComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetEntityHolderComponent(), isAdded);		}	}	public sealed class HealthBarHeightComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetHealthBarHeightComponent = (HealthBarHeightComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetHealthBarHeightComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetHealthBarHeightComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetHealthBarHeightComponent(), isAdded);		}	}	public sealed class HealthComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetHealthComponent = (HealthComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetHealthComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetHealthComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetHealthComponent(), isAdded);		}	}	public sealed class JumpStartSpeedComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetJumpStartSpeedComponent = (JumpStartSpeedComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetJumpStartSpeedComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetJumpStartSpeedComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetJumpStartSpeedComponent(), isAdded);		}	}	public sealed class MeleeAttackComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetMeleeAttackComponent = (MeleeAttackComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetMeleeAttackComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetMeleeAttackComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetMeleeAttackComponent(), isAdded);		}	}	public sealed class PlayerContainerComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPlayerContainerComponent = (PlayerContainerComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPlayerContainerComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetPlayerContainerComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetPlayerContainerComponent(), isAdded);		}	}	public sealed class SpawnPointComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSpawnPointComponent = (SpawnPointComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSpawnPointComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetSpawnPointComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetSpawnPointComponent(), isAdded);		}	}	public sealed class SpeedCoeffComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSpeedCoeffComponent = (SpeedCoeffComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSpeedCoeffComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetSpeedCoeffComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetSpeedCoeffComponent(), isAdded);		}	}	public sealed class StopMovingComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetStopMovingComponent = (StopMovingComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetStopMovingComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetStopMovingComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetStopMovingComponent(), isAdded);		}	}	public sealed class TargetSceneComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetTargetSceneComponent = (TargetSceneComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetTargetSceneComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetTargetSceneComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetTargetSceneComponent(), isAdded);		}	}	public sealed class WaitComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetWaitComponent = (WaitComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetWaitComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetWaitComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetWaitComponent(), isAdded);		}	}	public sealed class WayComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetWayComponent = (WayComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetWayComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetWayComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetWayComponent(), isAdded);		}	}	public sealed class WinPointsComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetWinPointsComponent = (WinPointsComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetWinPointsComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetWinPointsComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetWinPointsComponent(), isAdded);		}	}	public sealed class CMPlayerCamTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetCMPlayerCamTagComponent = (CMPlayerCamTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetCMPlayerCamTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetCMPlayerCamTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetCMPlayerCamTagComponent(), isAdded);		}	}	public sealed class DeadTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetDeadTagComponent = (DeadTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetDeadTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetDeadTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetDeadTagComponent(), isAdded);		}	}	public sealed class EnemySpawnPointTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetEnemySpawnPointTagComponent = (EnemySpawnPointTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetEnemySpawnPointTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetEnemySpawnPointTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetEnemySpawnPointTagComponent(), isAdded);		}	}	public sealed class EnemyTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetEnemyTagComponent = (EnemyTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetEnemyTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetEnemyTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetEnemyTagComponent(), isAdded);		}	}	public sealed class GroundedTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetGroundedTagComponent = (GroundedTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetGroundedTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetGroundedTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetGroundedTagComponent(), isAdded);		}	}	public sealed class HealthBarTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetHealthBarTagComponent = (HealthBarTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetHealthBarTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetHealthBarTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetHealthBarTagComponent(), isAdded);		}	}	public sealed class MainCameraTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetMainCameraTagComponent = (MainCameraTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetMainCameraTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetMainCameraTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetMainCameraTagComponent(), isAdded);		}	}	public sealed class MovingPlatformTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetMovingPlatformTagComponent = (MovingPlatformTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetMovingPlatformTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetMovingPlatformTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetMovingPlatformTagComponent(), isAdded);		}	}	public sealed class PlayerSpawnPointTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPlayerSpawnPointTagComponent = (PlayerSpawnPointTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPlayerSpawnPointTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetPlayerSpawnPointTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetPlayerSpawnPointTagComponent(), isAdded);		}	}	public sealed class PlayerTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPlayerTagComponent = (PlayerTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPlayerTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetPlayerTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetPlayerTagComponent(), isAdded);		}	}	public sealed class SubjectToGravityTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSubjectToGravityTagComponent = (SubjectToGravityTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSubjectToGravityTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetSubjectToGravityTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetSubjectToGravityTagComponent(), isAdded);		}	}	public sealed class WaterTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetWaterTagComponent = (WaterTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetWaterTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetWaterTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetWaterTagComponent(), isAdded);		}	}	public sealed class SavePositionComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSavePositionComponent = (SavePositionComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSavePositionComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetSavePositionComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetSavePositionComponent(), isAdded);		}	}	public sealed class ViewReferenceComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetViewReferenceComponent = (ViewReferenceComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetViewReferenceComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetViewReferenceComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetViewReferenceComponent(), isAdded);		}	}	public sealed class AbilityOwnerComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAbilityOwnerComponent = (AbilityOwnerComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAbilityOwnerComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAbilityOwnerComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAbilityOwnerComponent(), isAdded);		}	}	public sealed class AbilityPredicateComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAbilityPredicateComponent = (AbilityPredicateComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAbilityPredicateComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAbilityPredicateComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAbilityPredicateComponent(), isAdded);		}	}	public sealed class ActorContainerIDContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetActorContainerID = (ActorContainerID)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetActorContainerID = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetActorContainerID(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetActorContainerID(), isAdded);		}	}	public sealed class AppVersionComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAppVersionComponent = (AppVersionComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAppVersionComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAppVersionComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAppVersionComponent(), isAdded);		}	}	public sealed class PoolableTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPoolableTagComponent = (PoolableTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPoolableTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetPoolableTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetPoolableTagComponent(), isAdded);		}	}	public sealed class PredicatesComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPredicatesComponent = (PredicatesComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPredicatesComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetPredicatesComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetPredicatesComponent(), isAdded);		}	}	public sealed class AnimatorStateComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAnimatorStateComponent = (AnimatorStateComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAnimatorStateComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAnimatorStateComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAnimatorStateComponent(), isAdded);		}	}	public sealed class CountersHolderComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetCountersHolderComponent = (CountersHolderComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetCountersHolderComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetCountersHolderComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetCountersHolderComponent(), isAdded);		}	}	public sealed class TestSerializationComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetTestSerializationComponent = (TestSerializationComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetTestSerializationComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetTestSerializationComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetTestSerializationComponent(), isAdded);		}	}	public sealed class TransformComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetTransformComponent = (TransformComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetTransformComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetTransformComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetTransformComponent(), isAdded);		}	}	public sealed class AIStrategyComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAIStrategyComponent = (AIStrategyComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAIStrategyComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAIStrategyComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAIStrategyComponent(), isAdded);		}	}	public sealed class UntilSuccessStrategyNodeComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUntilSuccessStrategyNodeComponent = (UntilSuccessStrategyNodeComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUntilSuccessStrategyNodeComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetUntilSuccessStrategyNodeComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetUntilSuccessStrategyNodeComponent(), isAdded);		}	}	public sealed class AbilitiesHolderComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAbilitiesHolderComponent = (AbilitiesHolderComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAbilitiesHolderComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAbilitiesHolderComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAbilitiesHolderComponent(), isAdded);		}	}	public sealed class AfterLifeCompleteTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAfterLifeCompleteTagComponent = (AfterLifeCompleteTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAfterLifeCompleteTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAfterLifeCompleteTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAfterLifeCompleteTagComponent(), isAdded);		}	}	public sealed class AfterLifeTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAfterLifeTagComponent = (AfterLifeTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAfterLifeTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAfterLifeTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAfterLifeTagComponent(), isAdded);		}	}	public sealed class GameLogicTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetGameLogicTagComponent = (GameLogicTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetGameLogicTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetGameLogicTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetGameLogicTagComponent(), isAdded);		}	}	public sealed class InputActionsComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetInputActionsComponent = (InputActionsComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetInputActionsComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetInputActionsComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetInputActionsComponent(), isAdded);		}	}	public sealed class InputListenerTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetInputListenerTagComponent = (InputListenerTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetInputListenerTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetInputListenerTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetInputListenerTagComponent(), isAdded);		}	}	public sealed class ItemTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetItemTagComponent = (ItemTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetItemTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetItemTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetItemTagComponent(), isAdded);		}	}	public sealed class NavMeshAgentComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetNavMeshAgentComponent = (NavMeshAgentComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetNavMeshAgentComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetNavMeshAgentComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetNavMeshAgentComponent(), isAdded);		}	}	public sealed class NetworkEntityTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetNetworkEntityTagComponent = (NetworkEntityTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetNetworkEntityTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetNetworkEntityTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetNetworkEntityTagComponent(), isAdded);		}	}	public sealed class UIGroupTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUIGroupTagComponent = (UIGroupTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUIGroupTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetUIGroupTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetUIGroupTagComponent(), isAdded);		}	}	public sealed class UIViewReferenceComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUIViewReferenceComponent = (UIViewReferenceComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUIViewReferenceComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetUIViewReferenceComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetUIViewReferenceComponent(), isAdded);		}	}	public sealed class UnityRectTransformComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUnityRectTransformComponent = (UnityRectTransformComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUnityRectTransformComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetUnityRectTransformComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetUnityRectTransformComponent(), isAdded);		}	}	public sealed class UnityTransformComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUnityTransformComponent = (UnityTransformComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUnityTransformComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetUnityTransformComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetUnityTransformComponent(), isAdded);		}	}	public sealed class ViewDestructionDelayedComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetViewDestructionDelayedComponent = (ViewDestructionDelayedComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetViewDestructionDelayedComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetViewDestructionDelayedComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetViewDestructionDelayedComponent(), isAdded);		}	}	public sealed class ViewReferenceGameObjectComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetViewReferenceGameObjectComponent = (ViewReferenceGameObjectComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetViewReferenceGameObjectComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetViewReferenceGameObjectComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetViewReferenceGameObjectComponent(), isAdded);		}	}	public sealed class SoundVolumeComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSoundVolumeComponent = (SoundVolumeComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSoundVolumeComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetSoundVolumeComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetSoundVolumeComponent(), isAdded);		}	}	public sealed class AbilityTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAbilityTagComponent = (AbilityTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAbilityTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAbilityTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAbilityTagComponent(), isAdded);		}	}	public sealed class PassiveAbilityTagContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPassiveAbilityTag = (PassiveAbilityTag)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetPassiveAbilityTag = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetPassiveAbilityTag(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetPassiveAbilityTag(), isAdded);		}	}	public sealed class ScenarioAnimationComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetScenarioAnimationComponent = (ScenarioAnimationComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetScenarioAnimationComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetScenarioAnimationComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetScenarioAnimationComponent(), isAdded);		}	}	public sealed class StateContextComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetStateContextComponent = (StateContextComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetStateContextComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetStateContextComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetStateContextComponent(), isAdded);		}	}	public sealed class StateDataComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetStateDataComponent = (StateDataComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetStateDataComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetStateDataComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetStateDataComponent(), isAdded);		}	}	public sealed class StateInfoComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetStateInfoComponent = (StateInfoComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetStateInfoComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetStateInfoComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetStateInfoComponent(), isAdded);		}	}	public sealed class AnimationCheckOutsHolderComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAnimationCheckOutsHolderComponent = (AnimationCheckOutsHolderComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAnimationCheckOutsHolderComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAnimationCheckOutsHolderComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAnimationCheckOutsHolderComponent(), isAdded);		}	}	public sealed class OverrideAnimatorComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetOverrideAnimatorComponent = (OverrideAnimatorComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetOverrideAnimatorComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetOverrideAnimatorComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetOverrideAnimatorComponent(), isAdded);		}	}	public sealed class SetupAfterViewTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSetupAfterViewTagComponent = (SetupAfterViewTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetSetupAfterViewTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetSetupAfterViewTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetSetupAfterViewTagComponent(), isAdded);		}	}	public sealed class AdditionalCanvasTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAdditionalCanvasTagComponent = (AdditionalCanvasTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetAdditionalCanvasTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetAdditionalCanvasTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetAdditionalCanvasTagComponent(), isAdded);		}	}	public sealed class MainCanvasTagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetMainCanvasTagComponent = (MainCanvasTagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetMainCanvasTagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetMainCanvasTagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetMainCanvasTagComponent(), isAdded);		}	}	public sealed class UITagComponentContextSetter : IComponentContextSetter 	{		public void SetComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUITagComponent = (UITagComponent)component;		}		public void RemoveComponent(IEntity entity, IComponent component)		{			entity.ComponentContext.GetUITagComponent = null;		}		public void RegisterComponent(IEntity entity, bool isAdded)		{			entity.World.GlobalComponentListenerService.Invoke(entity.GetUITagComponent(), isAdded);			entity.RegisterComponentListenersService.Invoke(entity.GetUITagComponent(), isAdded);		}	}public static partial class TypesMap{	static partial void SetComponentsSetters()	{		componentsSetters = new Dictionary<int, IComponentContextSetter>(256)		{			{1, new CatchesListComponentContextSetter()},			{2, new CurrentSpeedComponentContextSetter()},			{3, new DamageAmountComponentContextSetter()},			{4, new EnemyContainerComponentContextSetter()},			{5, new EntityHolderComponentContextSetter()},			{6, new HealthBarHeightComponentContextSetter()},			{7, new HealthComponentContextSetter()},			{8, new JumpStartSpeedComponentContextSetter()},			{9, new MeleeAttackComponentContextSetter()},			{10, new PlayerContainerComponentContextSetter()},			{11, new SpawnPointComponentContextSetter()},			{12, new SpeedCoeffComponentContextSetter()},			{13, new StopMovingComponentContextSetter()},			{14, new TargetSceneComponentContextSetter()},			{15, new WaitComponentContextSetter()},			{16, new WayComponentContextSetter()},			{17, new WinPointsComponentContextSetter()},			{18, new CMPlayerCamTagComponentContextSetter()},			{19, new DeadTagComponentContextSetter()},			{20, new EnemySpawnPointTagComponentContextSetter()},			{21, new EnemyTagComponentContextSetter()},			{22, new GroundedTagComponentContextSetter()},			{23, new HealthBarTagComponentContextSetter()},			{24, new MainCameraTagComponentContextSetter()},			{25, new MovingPlatformTagComponentContextSetter()},			{26, new PlayerSpawnPointTagComponentContextSetter()},			{27, new PlayerTagComponentContextSetter()},			{28, new SubjectToGravityTagComponentContextSetter()},			{29, new WaterTagComponentContextSetter()},			{30, new SavePositionComponentContextSetter()},			{31, new ViewReferenceComponentContextSetter()},			{32, new AbilityOwnerComponentContextSetter()},			{33, new AbilityPredicateComponentContextSetter()},			{34, new ActorContainerIDContextSetter()},			{35, new AppVersionComponentContextSetter()},			{36, new PoolableTagComponentContextSetter()},			{37, new PredicatesComponentContextSetter()},			{38, new AnimatorStateComponentContextSetter()},			{39, new CountersHolderComponentContextSetter()},			{40, new TestSerializationComponentContextSetter()},			{41, new TransformComponentContextSetter()},			{42, new AIStrategyComponentContextSetter()},			{43, new UntilSuccessStrategyNodeComponentContextSetter()},			{44, new AbilitiesHolderComponentContextSetter()},			{45, new AfterLifeCompleteTagComponentContextSetter()},			{46, new AfterLifeTagComponentContextSetter()},			{47, new GameLogicTagComponentContextSetter()},			{48, new InputActionsComponentContextSetter()},			{49, new InputListenerTagComponentContextSetter()},			{50, new ItemTagComponentContextSetter()},			{51, new NavMeshAgentComponentContextSetter()},			{52, new NetworkEntityTagComponentContextSetter()},			{53, new UIGroupTagComponentContextSetter()},			{54, new UIViewReferenceComponentContextSetter()},			{55, new UnityRectTransformComponentContextSetter()},			{56, new UnityTransformComponentContextSetter()},			{57, new ViewDestructionDelayedComponentContextSetter()},			{58, new ViewReferenceGameObjectComponentContextSetter()},			{59, new SoundVolumeComponentContextSetter()},			{60, new AbilityTagComponentContextSetter()},			{61, new PassiveAbilityTagContextSetter()},			{62, new ScenarioAnimationComponentContextSetter()},			{63, new StateContextComponentContextSetter()},			{64, new StateDataComponentContextSetter()},			{65, new StateInfoComponentContextSetter()},			{66, new AnimationCheckOutsHolderComponentContextSetter()},			{67, new OverrideAnimatorComponentContextSetter()},			{68, new SetupAfterViewTagComponentContextSetter()},			{69, new AdditionalCanvasTagComponentContextSetter()},			{70, new MainCanvasTagComponentContextSetter()},			{71, new UITagComponentContextSetter()},		};	}}	public partial class TypesProvider	{		public TypesProvider()		{			Count = 72;			MapIndexes = GetMapIndexes();			TypeToComponentIndex = GetTypeToComponentIndexes();			HashToType = GetHashToTypeDictionary();			TypeToHash = GetTypeToHash();			HECSFactory = new HECSFactory();		}		private Dictionary<Type, int> GetTypeToComponentIndexes()		{			return new Dictionary<Type, int>()			{				{ typeof(CatchesListComponent), 1 },				{ typeof(CurrentSpeedComponent), 2 },				{ typeof(DamageAmountComponent), 3 },				{ typeof(EnemyContainerComponent), 4 },				{ typeof(EntityHolderComponent), 5 },				{ typeof(HealthBarHeightComponent), 6 },				{ typeof(HealthComponent), 7 },				{ typeof(JumpStartSpeedComponent), 8 },				{ typeof(MeleeAttackComponent), 9 },				{ typeof(PlayerContainerComponent), 10 },				{ typeof(SpawnPointComponent), 11 },				{ typeof(SpeedCoeffComponent), 12 },				{ typeof(StopMovingComponent), 13 },				{ typeof(TargetSceneComponent), 14 },				{ typeof(WaitComponent), 15 },				{ typeof(WayComponent), 16 },				{ typeof(WinPointsComponent), 17 },				{ typeof(CMPlayerCamTagComponent), 18 },				{ typeof(DeadTagComponent), 19 },				{ typeof(EnemySpawnPointTagComponent), 20 },				{ typeof(EnemyTagComponent), 21 },				{ typeof(GroundedTagComponent), 22 },				{ typeof(HealthBarTagComponent), 23 },				{ typeof(MainCameraTagComponent), 24 },				{ typeof(MovingPlatformTagComponent), 25 },				{ typeof(PlayerSpawnPointTagComponent), 26 },				{ typeof(PlayerTagComponent), 27 },				{ typeof(SubjectToGravityTagComponent), 28 },				{ typeof(WaterTagComponent), 29 },				{ typeof(SavePositionComponent), 30 },				{ typeof(ViewReferenceComponent), 31 },				{ typeof(AbilityOwnerComponent), 32 },				{ typeof(AbilityPredicateComponent), 33 },				{ typeof(ActorContainerID), 34 },				{ typeof(AppVersionComponent), 35 },				{ typeof(PoolableTagComponent), 36 },				{ typeof(PredicatesComponent), 37 },				{ typeof(AnimatorStateComponent), 38 },				{ typeof(CountersHolderComponent), 39 },				{ typeof(TestSerializationComponent), 40 },				{ typeof(TransformComponent), 41 },				{ typeof(AIStrategyComponent), 42 },				{ typeof(UntilSuccessStrategyNodeComponent), 43 },				{ typeof(AbilitiesHolderComponent), 44 },				{ typeof(AfterLifeCompleteTagComponent), 45 },				{ typeof(AfterLifeTagComponent), 46 },				{ typeof(GameLogicTagComponent), 47 },				{ typeof(InputActionsComponent), 48 },				{ typeof(InputListenerTagComponent), 49 },				{ typeof(ItemTagComponent), 50 },				{ typeof(NavMeshAgentComponent), 51 },				{ typeof(NetworkEntityTagComponent), 52 },				{ typeof(UIGroupTagComponent), 53 },				{ typeof(UIViewReferenceComponent), 54 },				{ typeof(UnityRectTransformComponent), 55 },				{ typeof(UnityTransformComponent), 56 },				{ typeof(ViewDestructionDelayedComponent), 57 },				{ typeof(ViewReferenceGameObjectComponent), 58 },				{ typeof(SoundVolumeComponent), 59 },				{ typeof(AbilityTagComponent), 60 },				{ typeof(PassiveAbilityTag), 61 },				{ typeof(ScenarioAnimationComponent), 62 },				{ typeof(StateContextComponent), 63 },				{ typeof(StateDataComponent), 64 },				{ typeof(StateInfoComponent), 65 },				{ typeof(AnimationCheckOutsHolderComponent), 66 },				{ typeof(OverrideAnimatorComponent), 67 },				{ typeof(SetupAfterViewTagComponent), 68 },				{ typeof(AdditionalCanvasTagComponent), 69 },				{ typeof(MainCanvasTagComponent), 70 },				{ typeof(UITagComponent), 71 },			};		}		private Dictionary<Type, int> GetTypeToHash()		{			return new Dictionary<Type, int>()			{				{ typeof(CatchesListComponent), 1593974329 },				{ typeof(CurrentSpeedComponent), 131305000 },				{ typeof(DamageAmountComponent), 310406913 },				{ typeof(EnemyContainerComponent), -1600851739 },				{ typeof(EntityHolderComponent), 228827352 },				{ typeof(HealthBarHeightComponent), 1866677304 },				{ typeof(HealthComponent), -589508998 },				{ typeof(JumpStartSpeedComponent), -1829513680 },				{ typeof(MeleeAttackComponent), 1485071087 },				{ typeof(PlayerContainerComponent), -2106908360 },				{ typeof(SpawnPointComponent), -1056876887 },				{ typeof(SpeedCoeffComponent), -1224390775 },				{ typeof(StopMovingComponent), -1119266739 },				{ typeof(TargetSceneComponent), 1444092518 },				{ typeof(WaitComponent), 953117234 },				{ typeof(WayComponent), -209031385 },				{ typeof(WinPointsComponent), 920585640 },				{ typeof(CMPlayerCamTagComponent), 2124081175 },				{ typeof(DeadTagComponent), 999978316 },				{ typeof(EnemySpawnPointTagComponent), -1932250433 },				{ typeof(EnemyTagComponent), -1416715012 },				{ typeof(GroundedTagComponent), 1362251933 },				{ typeof(HealthBarTagComponent), -98003163 },				{ typeof(MainCameraTagComponent), -1253761452 },				{ typeof(MovingPlatformTagComponent), 1901080376 },				{ typeof(PlayerSpawnPointTagComponent), -976967698 },				{ typeof(PlayerTagComponent), 760610747 },				{ typeof(SubjectToGravityTagComponent), -860218305 },				{ typeof(WaterTagComponent), -1405967260 },				{ typeof(SavePositionComponent), 369067176 },				{ typeof(ViewReferenceComponent), -1029564515 },				{ typeof(AbilityOwnerComponent), 313621202 },				{ typeof(AbilityPredicateComponent), 1878456296 },				{ typeof(ActorContainerID), -142928435 },				{ typeof(AppVersionComponent), -988064901 },				{ typeof(PoolableTagComponent), 1354058828 },				{ typeof(PredicatesComponent), -1064941338 },				{ typeof(AnimatorStateComponent), -950198728 },				{ typeof(CountersHolderComponent), -1627736277 },				{ typeof(TestSerializationComponent), -1713719609 },				{ typeof(TransformComponent), 888932549 },				{ typeof(AIStrategyComponent), -952149029 },				{ typeof(UntilSuccessStrategyNodeComponent), 1143262242 },				{ typeof(AbilitiesHolderComponent), 2041590961 },				{ typeof(AfterLifeCompleteTagComponent), 53484848 },				{ typeof(AfterLifeTagComponent), -88497250 },				{ typeof(GameLogicTagComponent), -100950956 },				{ typeof(InputActionsComponent), 369850288 },				{ typeof(InputListenerTagComponent), 1776997060 },				{ typeof(ItemTagComponent), 1004631539 },				{ typeof(NavMeshAgentComponent), 117603503 },				{ typeof(NetworkEntityTagComponent), 1908646573 },				{ typeof(UIGroupTagComponent), -1162002111 },				{ typeof(UIViewReferenceComponent), 1908410989 },				{ typeof(UnityRectTransformComponent), -1206519595 },				{ typeof(UnityTransformComponent), -1425063609 },				{ typeof(ViewDestructionDelayedComponent), 42315994 },				{ typeof(ViewReferenceGameObjectComponent), 1656499746 },				{ typeof(SoundVolumeComponent), 1587816967 },				{ typeof(AbilityTagComponent), -1150856501 },				{ typeof(PassiveAbilityTag), -1856633313 },				{ typeof(ScenarioAnimationComponent), -1965185654 },				{ typeof(StateContextComponent), 387690372 },				{ typeof(StateDataComponent), 760681168 },				{ typeof(StateInfoComponent), 819793506 },				{ typeof(AnimationCheckOutsHolderComponent), 1046176786 },				{ typeof(OverrideAnimatorComponent), -2117687604 },				{ typeof(SetupAfterViewTagComponent), 1782176358 },				{ typeof(AdditionalCanvasTagComponent), -1191206187 },				{ typeof(MainCanvasTagComponent), -1144719428 },				{ typeof(UITagComponent), -2124047058 },			};		}		private Dictionary<int, Type> GetHashToTypeDictionary()		{			return new Dictionary<int, Type>()			{				{ 1593974329, typeof(CatchesListComponent)},				{ 131305000, typeof(CurrentSpeedComponent)},				{ 310406913, typeof(DamageAmountComponent)},				{ -1600851739, typeof(EnemyContainerComponent)},				{ 228827352, typeof(EntityHolderComponent)},				{ 1866677304, typeof(HealthBarHeightComponent)},				{ -589508998, typeof(HealthComponent)},				{ -1829513680, typeof(JumpStartSpeedComponent)},				{ 1485071087, typeof(MeleeAttackComponent)},				{ -2106908360, typeof(PlayerContainerComponent)},				{ -1056876887, typeof(SpawnPointComponent)},				{ -1224390775, typeof(SpeedCoeffComponent)},				{ -1119266739, typeof(StopMovingComponent)},				{ 1444092518, typeof(TargetSceneComponent)},				{ 953117234, typeof(WaitComponent)},				{ -209031385, typeof(WayComponent)},				{ 920585640, typeof(WinPointsComponent)},				{ 2124081175, typeof(CMPlayerCamTagComponent)},				{ 999978316, typeof(DeadTagComponent)},				{ -1932250433, typeof(EnemySpawnPointTagComponent)},				{ -1416715012, typeof(EnemyTagComponent)},				{ 1362251933, typeof(GroundedTagComponent)},				{ -98003163, typeof(HealthBarTagComponent)},				{ -1253761452, typeof(MainCameraTagComponent)},				{ 1901080376, typeof(MovingPlatformTagComponent)},				{ -976967698, typeof(PlayerSpawnPointTagComponent)},				{ 760610747, typeof(PlayerTagComponent)},				{ -860218305, typeof(SubjectToGravityTagComponent)},				{ -1405967260, typeof(WaterTagComponent)},				{ 369067176, typeof(SavePositionComponent)},				{ -1029564515, typeof(ViewReferenceComponent)},				{ 313621202, typeof(AbilityOwnerComponent)},				{ 1878456296, typeof(AbilityPredicateComponent)},				{ -142928435, typeof(ActorContainerID)},				{ -988064901, typeof(AppVersionComponent)},				{ 1354058828, typeof(PoolableTagComponent)},				{ -1064941338, typeof(PredicatesComponent)},				{ -950198728, typeof(AnimatorStateComponent)},				{ -1627736277, typeof(CountersHolderComponent)},				{ -1713719609, typeof(TestSerializationComponent)},				{ 888932549, typeof(TransformComponent)},				{ -952149029, typeof(AIStrategyComponent)},				{ 1143262242, typeof(UntilSuccessStrategyNodeComponent)},				{ 2041590961, typeof(AbilitiesHolderComponent)},				{ 53484848, typeof(AfterLifeCompleteTagComponent)},				{ -88497250, typeof(AfterLifeTagComponent)},				{ -100950956, typeof(GameLogicTagComponent)},				{ 369850288, typeof(InputActionsComponent)},				{ 1776997060, typeof(InputListenerTagComponent)},				{ 1004631539, typeof(ItemTagComponent)},				{ 117603503, typeof(NavMeshAgentComponent)},				{ 1908646573, typeof(NetworkEntityTagComponent)},				{ -1162002111, typeof(UIGroupTagComponent)},				{ 1908410989, typeof(UIViewReferenceComponent)},				{ -1206519595, typeof(UnityRectTransformComponent)},				{ -1425063609, typeof(UnityTransformComponent)},				{ 42315994, typeof(ViewDestructionDelayedComponent)},				{ 1656499746, typeof(ViewReferenceGameObjectComponent)},				{ 1587816967, typeof(SoundVolumeComponent)},				{ -1150856501, typeof(AbilityTagComponent)},				{ -1856633313, typeof(PassiveAbilityTag)},				{ -1965185654, typeof(ScenarioAnimationComponent)},				{ 387690372, typeof(StateContextComponent)},				{ 760681168, typeof(StateDataComponent)},				{ 819793506, typeof(StateInfoComponent)},				{ 1046176786, typeof(AnimationCheckOutsHolderComponent)},				{ -2117687604, typeof(OverrideAnimatorComponent)},				{ 1782176358, typeof(SetupAfterViewTagComponent)},				{ -1191206187, typeof(AdditionalCanvasTagComponent)},				{ -1144719428, typeof(MainCanvasTagComponent)},				{ -2124047058, typeof(UITagComponent)},			};		}		private Dictionary<int, ComponentMaskAndIndex> GetMapIndexes()		{			return new Dictionary<int, ComponentMaskAndIndex>			{				{ -1, new ComponentMaskAndIndex {  ComponentName = "DefaultEmpty", ComponentsMask = HECSMask.Empty }},			{ 1593974329, new ComponentMaskAndIndex {ComponentName = "CatchesListComponent", ComponentsMask = new HECSMask				{					Index = 1,					TypeHashCode = 1593974329,				}			}},			{ 131305000, new ComponentMaskAndIndex {ComponentName = "CurrentSpeedComponent", ComponentsMask = new HECSMask				{					Index = 2,					TypeHashCode = 131305000,				}			}},			{ 310406913, new ComponentMaskAndIndex {ComponentName = "DamageAmountComponent", ComponentsMask = new HECSMask				{					Index = 3,					TypeHashCode = 310406913,				}			}},			{ -1600851739, new ComponentMaskAndIndex {ComponentName = "EnemyContainerComponent", ComponentsMask = new HECSMask				{					Index = 4,					TypeHashCode = -1600851739,				}			}},			{ 228827352, new ComponentMaskAndIndex {ComponentName = "EntityHolderComponent", ComponentsMask = new HECSMask				{					Index = 5,					TypeHashCode = 228827352,				}			}},			{ 1866677304, new ComponentMaskAndIndex {ComponentName = "HealthBarHeightComponent", ComponentsMask = new HECSMask				{					Index = 6,					TypeHashCode = 1866677304,				}			}},			{ -589508998, new ComponentMaskAndIndex {ComponentName = "HealthComponent", ComponentsMask = new HECSMask				{					Index = 7,					TypeHashCode = -589508998,				}			}},			{ -1829513680, new ComponentMaskAndIndex {ComponentName = "JumpStartSpeedComponent", ComponentsMask = new HECSMask				{					Index = 8,					TypeHashCode = -1829513680,				}			}},			{ 1485071087, new ComponentMaskAndIndex {ComponentName = "MeleeAttackComponent", ComponentsMask = new HECSMask				{					Index = 9,					TypeHashCode = 1485071087,				}			}},			{ -2106908360, new ComponentMaskAndIndex {ComponentName = "PlayerContainerComponent", ComponentsMask = new HECSMask				{					Index = 10,					TypeHashCode = -2106908360,				}			}},			{ -1056876887, new ComponentMaskAndIndex {ComponentName = "SpawnPointComponent", ComponentsMask = new HECSMask				{					Index = 11,					TypeHashCode = -1056876887,				}			}},			{ -1224390775, new ComponentMaskAndIndex {ComponentName = "SpeedCoeffComponent", ComponentsMask = new HECSMask				{					Index = 12,					TypeHashCode = -1224390775,				}			}},			{ -1119266739, new ComponentMaskAndIndex {ComponentName = "StopMovingComponent", ComponentsMask = new HECSMask				{					Index = 13,					TypeHashCode = -1119266739,				}			}},			{ 1444092518, new ComponentMaskAndIndex {ComponentName = "TargetSceneComponent", ComponentsMask = new HECSMask				{					Index = 14,					TypeHashCode = 1444092518,				}			}},			{ 953117234, new ComponentMaskAndIndex {ComponentName = "WaitComponent", ComponentsMask = new HECSMask				{					Index = 15,					TypeHashCode = 953117234,				}			}},			{ -209031385, new ComponentMaskAndIndex {ComponentName = "WayComponent", ComponentsMask = new HECSMask				{					Index = 16,					TypeHashCode = -209031385,				}			}},			{ 920585640, new ComponentMaskAndIndex {ComponentName = "WinPointsComponent", ComponentsMask = new HECSMask				{					Index = 17,					TypeHashCode = 920585640,				}			}},			{ 2124081175, new ComponentMaskAndIndex {ComponentName = "CMPlayerCamTagComponent", ComponentsMask = new HECSMask				{					Index = 18,					TypeHashCode = 2124081175,				}			}},			{ 999978316, new ComponentMaskAndIndex {ComponentName = "DeadTagComponent", ComponentsMask = new HECSMask				{					Index = 19,					TypeHashCode = 999978316,				}			}},			{ -1932250433, new ComponentMaskAndIndex {ComponentName = "EnemySpawnPointTagComponent", ComponentsMask = new HECSMask				{					Index = 20,					TypeHashCode = -1932250433,				}			}},			{ -1416715012, new ComponentMaskAndIndex {ComponentName = "EnemyTagComponent", ComponentsMask = new HECSMask				{					Index = 21,					TypeHashCode = -1416715012,				}			}},			{ 1362251933, new ComponentMaskAndIndex {ComponentName = "GroundedTagComponent", ComponentsMask = new HECSMask				{					Index = 22,					TypeHashCode = 1362251933,				}			}},			{ -98003163, new ComponentMaskAndIndex {ComponentName = "HealthBarTagComponent", ComponentsMask = new HECSMask				{					Index = 23,					TypeHashCode = -98003163,				}			}},			{ -1253761452, new ComponentMaskAndIndex {ComponentName = "MainCameraTagComponent", ComponentsMask = new HECSMask				{					Index = 24,					TypeHashCode = -1253761452,				}			}},			{ 1901080376, new ComponentMaskAndIndex {ComponentName = "MovingPlatformTagComponent", ComponentsMask = new HECSMask				{					Index = 25,					TypeHashCode = 1901080376,				}			}},			{ -976967698, new ComponentMaskAndIndex {ComponentName = "PlayerSpawnPointTagComponent", ComponentsMask = new HECSMask				{					Index = 26,					TypeHashCode = -976967698,				}			}},			{ 760610747, new ComponentMaskAndIndex {ComponentName = "PlayerTagComponent", ComponentsMask = new HECSMask				{					Index = 27,					TypeHashCode = 760610747,				}			}},			{ -860218305, new ComponentMaskAndIndex {ComponentName = "SubjectToGravityTagComponent", ComponentsMask = new HECSMask				{					Index = 28,					TypeHashCode = -860218305,				}			}},			{ -1405967260, new ComponentMaskAndIndex {ComponentName = "WaterTagComponent", ComponentsMask = new HECSMask				{					Index = 29,					TypeHashCode = -1405967260,				}			}},			{ 369067176, new ComponentMaskAndIndex {ComponentName = "SavePositionComponent", ComponentsMask = new HECSMask				{					Index = 30,					TypeHashCode = 369067176,				}			}},			{ -1029564515, new ComponentMaskAndIndex {ComponentName = "ViewReferenceComponent", ComponentsMask = new HECSMask				{					Index = 31,					TypeHashCode = -1029564515,				}			}},			{ 313621202, new ComponentMaskAndIndex {ComponentName = "AbilityOwnerComponent", ComponentsMask = new HECSMask				{					Index = 32,					TypeHashCode = 313621202,				}			}},			{ 1878456296, new ComponentMaskAndIndex {ComponentName = "AbilityPredicateComponent", ComponentsMask = new HECSMask				{					Index = 33,					TypeHashCode = 1878456296,				}			}},			{ -142928435, new ComponentMaskAndIndex {ComponentName = "ActorContainerID", ComponentsMask = new HECSMask				{					Index = 34,					TypeHashCode = -142928435,				}			}},			{ -988064901, new ComponentMaskAndIndex {ComponentName = "AppVersionComponent", ComponentsMask = new HECSMask				{					Index = 35,					TypeHashCode = -988064901,				}			}},			{ 1354058828, new ComponentMaskAndIndex {ComponentName = "PoolableTagComponent", ComponentsMask = new HECSMask				{					Index = 36,					TypeHashCode = 1354058828,				}			}},			{ -1064941338, new ComponentMaskAndIndex {ComponentName = "PredicatesComponent", ComponentsMask = new HECSMask				{					Index = 37,					TypeHashCode = -1064941338,				}			}},			{ -950198728, new ComponentMaskAndIndex {ComponentName = "AnimatorStateComponent", ComponentsMask = new HECSMask				{					Index = 38,					TypeHashCode = -950198728,				}			}},			{ -1627736277, new ComponentMaskAndIndex {ComponentName = "CountersHolderComponent", ComponentsMask = new HECSMask				{					Index = 39,					TypeHashCode = -1627736277,				}			}},			{ -1713719609, new ComponentMaskAndIndex {ComponentName = "TestSerializationComponent", ComponentsMask = new HECSMask				{					Index = 40,					TypeHashCode = -1713719609,				}			}},			{ 888932549, new ComponentMaskAndIndex {ComponentName = "TransformComponent", ComponentsMask = new HECSMask				{					Index = 41,					TypeHashCode = 888932549,				}			}},			{ -952149029, new ComponentMaskAndIndex {ComponentName = "AIStrategyComponent", ComponentsMask = new HECSMask				{					Index = 42,					TypeHashCode = -952149029,				}			}},			{ 1143262242, new ComponentMaskAndIndex {ComponentName = "UntilSuccessStrategyNodeComponent", ComponentsMask = new HECSMask				{					Index = 43,					TypeHashCode = 1143262242,				}			}},			{ 2041590961, new ComponentMaskAndIndex {ComponentName = "AbilitiesHolderComponent", ComponentsMask = new HECSMask				{					Index = 44,					TypeHashCode = 2041590961,				}			}},			{ 53484848, new ComponentMaskAndIndex {ComponentName = "AfterLifeCompleteTagComponent", ComponentsMask = new HECSMask				{					Index = 45,					TypeHashCode = 53484848,				}			}},			{ -88497250, new ComponentMaskAndIndex {ComponentName = "AfterLifeTagComponent", ComponentsMask = new HECSMask				{					Index = 46,					TypeHashCode = -88497250,				}			}},			{ -100950956, new ComponentMaskAndIndex {ComponentName = "GameLogicTagComponent", ComponentsMask = new HECSMask				{					Index = 47,					TypeHashCode = -100950956,				}			}},			{ 369850288, new ComponentMaskAndIndex {ComponentName = "InputActionsComponent", ComponentsMask = new HECSMask				{					Index = 48,					TypeHashCode = 369850288,				}			}},			{ 1776997060, new ComponentMaskAndIndex {ComponentName = "InputListenerTagComponent", ComponentsMask = new HECSMask				{					Index = 49,					TypeHashCode = 1776997060,				}			}},			{ 1004631539, new ComponentMaskAndIndex {ComponentName = "ItemTagComponent", ComponentsMask = new HECSMask				{					Index = 50,					TypeHashCode = 1004631539,				}			}},			{ 117603503, new ComponentMaskAndIndex {ComponentName = "NavMeshAgentComponent", ComponentsMask = new HECSMask				{					Index = 51,					TypeHashCode = 117603503,				}			}},			{ 1908646573, new ComponentMaskAndIndex {ComponentName = "NetworkEntityTagComponent", ComponentsMask = new HECSMask				{					Index = 52,					TypeHashCode = 1908646573,				}			}},			{ -1162002111, new ComponentMaskAndIndex {ComponentName = "UIGroupTagComponent", ComponentsMask = new HECSMask				{					Index = 53,					TypeHashCode = -1162002111,				}			}},			{ 1908410989, new ComponentMaskAndIndex {ComponentName = "UIViewReferenceComponent", ComponentsMask = new HECSMask				{					Index = 54,					TypeHashCode = 1908410989,				}			}},			{ -1206519595, new ComponentMaskAndIndex {ComponentName = "UnityRectTransformComponent", ComponentsMask = new HECSMask				{					Index = 55,					TypeHashCode = -1206519595,				}			}},			{ -1425063609, new ComponentMaskAndIndex {ComponentName = "UnityTransformComponent", ComponentsMask = new HECSMask				{					Index = 56,					TypeHashCode = -1425063609,				}			}},			{ 42315994, new ComponentMaskAndIndex {ComponentName = "ViewDestructionDelayedComponent", ComponentsMask = new HECSMask				{					Index = 57,					TypeHashCode = 42315994,				}			}},			{ 1656499746, new ComponentMaskAndIndex {ComponentName = "ViewReferenceGameObjectComponent", ComponentsMask = new HECSMask				{					Index = 58,					TypeHashCode = 1656499746,				}			}},			{ 1587816967, new ComponentMaskAndIndex {ComponentName = "SoundVolumeComponent", ComponentsMask = new HECSMask				{					Index = 59,					TypeHashCode = 1587816967,				}			}},			{ -1150856501, new ComponentMaskAndIndex {ComponentName = "AbilityTagComponent", ComponentsMask = new HECSMask				{					Index = 60,					TypeHashCode = -1150856501,				}			}},			{ -1856633313, new ComponentMaskAndIndex {ComponentName = "PassiveAbilityTag", ComponentsMask = new HECSMask				{					Index = 61,					TypeHashCode = -1856633313,				}			}},			{ -1965185654, new ComponentMaskAndIndex {ComponentName = "ScenarioAnimationComponent", ComponentsMask = new HECSMask				{					Index = 62,					TypeHashCode = -1965185654,				}			}},			{ 387690372, new ComponentMaskAndIndex {ComponentName = "StateContextComponent", ComponentsMask = new HECSMask				{					Index = 63,					TypeHashCode = 387690372,				}			}},			{ 760681168, new ComponentMaskAndIndex {ComponentName = "StateDataComponent", ComponentsMask = new HECSMask				{					Index = 64,					TypeHashCode = 760681168,				}			}},			{ 819793506, new ComponentMaskAndIndex {ComponentName = "StateInfoComponent", ComponentsMask = new HECSMask				{					Index = 65,					TypeHashCode = 819793506,				}			}},			{ 1046176786, new ComponentMaskAndIndex {ComponentName = "AnimationCheckOutsHolderComponent", ComponentsMask = new HECSMask				{					Index = 66,					TypeHashCode = 1046176786,				}			}},			{ -2117687604, new ComponentMaskAndIndex {ComponentName = "OverrideAnimatorComponent", ComponentsMask = new HECSMask				{					Index = 67,					TypeHashCode = -2117687604,				}			}},			{ 1782176358, new ComponentMaskAndIndex {ComponentName = "SetupAfterViewTagComponent", ComponentsMask = new HECSMask				{					Index = 68,					TypeHashCode = 1782176358,				}			}},			{ -1191206187, new ComponentMaskAndIndex {ComponentName = "AdditionalCanvasTagComponent", ComponentsMask = new HECSMask				{					Index = 69,					TypeHashCode = -1191206187,				}			}},			{ -1144719428, new ComponentMaskAndIndex {ComponentName = "MainCanvasTagComponent", ComponentsMask = new HECSMask				{					Index = 70,					TypeHashCode = -1144719428,				}			}},			{ -2124047058, new ComponentMaskAndIndex {ComponentName = "UITagComponent", ComponentsMask = new HECSMask				{					Index = 71,					TypeHashCode = -2124047058,				}			}},			};		}	}	public partial class HECSFactory	{		public HECSFactory()		{			getComponentFromFactoryByHash = GetComponentFromFactoryFunc;			getSystemFromFactoryByHash = GetSystemFromFactoryFunc;		}		private IComponent GetComponentFromFactoryFunc(int hashCodeType)		{			switch (hashCodeType)			{				case 1593974329:					return new CatchesListComponent();				case 131305000:					return new CurrentSpeedComponent();				case 310406913:					return new DamageAmountComponent();				case -1600851739:					return new EnemyContainerComponent();				case 228827352:					return new EntityHolderComponent();				case 1866677304:					return new HealthBarHeightComponent();				case -589508998:					return new HealthComponent();				case -1829513680:					return new JumpStartSpeedComponent();				case 1485071087:					return new MeleeAttackComponent();				case -2106908360:					return new PlayerContainerComponent();				case -1056876887:					return new SpawnPointComponent();				case -1224390775:					return new SpeedCoeffComponent();				case -1119266739:					return new StopMovingComponent();				case 1444092518:					return new TargetSceneComponent();				case 953117234:					return new WaitComponent();				case -209031385:					return new WayComponent();				case 920585640:					return new WinPointsComponent();				case 2124081175:					return new CMPlayerCamTagComponent();				case 999978316:					return new DeadTagComponent();				case -1932250433:					return new EnemySpawnPointTagComponent();				case -1416715012:					return new EnemyTagComponent();				case 1362251933:					return new GroundedTagComponent();				case -98003163:					return new HealthBarTagComponent();				case -1253761452:					return new MainCameraTagComponent();				case 1901080376:					return new MovingPlatformTagComponent();				case -976967698:					return new PlayerSpawnPointTagComponent();				case 760610747:					return new PlayerTagComponent();				case -860218305:					return new SubjectToGravityTagComponent();				case -1405967260:					return new WaterTagComponent();				case 369067176:					return new SavePositionComponent();				case -1029564515:					return new ViewReferenceComponent();				case 313621202:					return new AbilityOwnerComponent();				case 1878456296:					return new AbilityPredicateComponent();				case -142928435:					return new ActorContainerID();				case -988064901:					return new AppVersionComponent();				case 1354058828:					return new PoolableTagComponent();				case -1064941338:					return new PredicatesComponent();				case -950198728:					return new AnimatorStateComponent();				case -1627736277:					return new CountersHolderComponent();				case -1713719609:					return new TestSerializationComponent();				case 888932549:					return new TransformComponent();				case -952149029:					return new AIStrategyComponent();				case 1143262242:					return new UntilSuccessStrategyNodeComponent();				case 2041590961:					return new AbilitiesHolderComponent();				case 53484848:					return new AfterLifeCompleteTagComponent();				case -88497250:					return new AfterLifeTagComponent();				case -100950956:					return new GameLogicTagComponent();				case 369850288:					return new InputActionsComponent();				case 1776997060:					return new InputListenerTagComponent();				case 1004631539:					return new ItemTagComponent();				case 117603503:					return new NavMeshAgentComponent();				case 1908646573:					return new NetworkEntityTagComponent();				case -1162002111:					return new UIGroupTagComponent();				case 1908410989:					return new UIViewReferenceComponent();				case -1206519595:					return new UnityRectTransformComponent();				case -1425063609:					return new UnityTransformComponent();				case 42315994:					return new ViewDestructionDelayedComponent();				case 1656499746:					return new ViewReferenceGameObjectComponent();				case 1587816967:					return new SoundVolumeComponent();				case -1150856501:					return new AbilityTagComponent();				case -1856633313:					return new PassiveAbilityTag();				case -1965185654:					return new ScenarioAnimationComponent();				case 387690372:					return new StateContextComponent();				case 760681168:					return new StateDataComponent();				case 819793506:					return new StateInfoComponent();				case 1046176786:					return new AnimationCheckOutsHolderComponent();				case -2117687604:					return new OverrideAnimatorComponent();				case 1782176358:					return new SetupAfterViewTagComponent();				case -1191206187:					return new AdditionalCanvasTagComponent();				case -1144719428:					return new MainCanvasTagComponent();				case -2124047058:					return new UITagComponent();			}			return default;		}		private ISystem GetSystemFromFactoryFunc(int hashCodeType)		{			switch (hashCodeType)			{				case 789997887:					return new DeathHandlerSystem();				case -1395568846:					return new EnemyAttackSystem();				case -1636263211:					return new EnemyHealthUISystem();				case 1045293627:					return new EnemySpawnSystem();				case 994115440:					return new GravitySystem();				case 1962189365:					return new HealthUISystem();				case -1251136911:					return new InitializationCameraFollowSystem();				case 891282387:					return new JumpingSystem();				case -537807228:					return new KilledEnemiesUISystem();				case -1299643226:					return new MovingEnemySystem();				case 1647850419:					return new MovingPlatformSystem();				case -229879607:					return new MovingSystem();				case 1959001779:					return new PlatformCatchPlayerSystem();				case 366949385:					return new PlayerAnimationSystem();				case -1981768064:					return new PlayerMeleeAttackSystem();				case -1274541591:					return new PlayerSpawnSystem();				case 785797967:					return new PortalSwitchSystem();				case 938337649:					return new RespawnSystem();				case 1070566247:					return new SpawnEnemyHealthUISystem();				case -1622237589:					return new SpawnHealthUISystem();				case 829472860:					return new SpawnKilledEnemiesUISystem();				case -786381048:					return new SpitterAnimationSystem();				case -1446967330:					return new SwitchSceneSystem();				case 1416409820:					return new TagingGroundedSystem();				case 897258324:					return new TakeDamageSystem();				case -1523770078:					return new WaterDamageSystem();				case -531995445:					return new WinPointsSystem();				case 1748462466:					return new WinSystem();				case -579706225:					return new AbilitiesSystem();				case -636918234:					return new JobUpdateSystem();				case -1857160786:					return new DestroyEntityWorldSystem();				case 889578405:					return new PoolingSystem();				case -1795809721:					return new RemoveComponentWorldSystem();				case -646677924:					return new WaitingCommandsSystems();				case -1199486581:					return new AINPCSystem();				case -1273150962:					return new InputListenSystem();				case -585996021:					return new SpawnViewSystem();				case -1087811633:					return new StartSystem();				case -1277883239:					return new UpdateActorByTranformSystem();				case 612152530:					return new UpdateTranformFromActorSystem();				case -1459275698:					return new SoundGlobalSystem();				case -315138388:					return new HideUISystem();				case 1256894449:					return new UISystem();				case 1551745777:					return new CountersHolderSystem();				case -1366223974:					return new StateUpdateSystem();				case -1817032501:					return new StrategiesMainServiceSystem();				case 2115456507:					return new AnimationDoneCheckOutSystem();				case -561225003:					return new AnimationSystem();				case -2069977297:					return new CompositeAbilitiesSystem();			}			return default;		}	}}