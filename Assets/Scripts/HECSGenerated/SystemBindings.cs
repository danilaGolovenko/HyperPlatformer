using System;using Systems;using Commands;using Components;using System.Reflection;namespace HECSFramework.Core{	public sealed class AbilitiesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AbilitiesSystem)system;			currentSystem.abilitiesHolderComponent = currentSystem.Owner.GetOrAddComponent<AbilitiesHolderComponent>(HMasks.AbilitiesHolderComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AbilitiesSystem)system;			currentSystem.abilitiesHolderComponent = null;		}	}	public sealed class JobUpdateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class DestroyEntityWorldSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DestroyEntityWorldSystem)system;			system.Owner.World.AddGlobalReactCommand<DestroyEntityWorldCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DestroyEntityWorldSystem)system;			system.Owner.World.RemoveGlobalReactCommand<DestroyEntityWorldCommand>(system);		}	}	public sealed class PoolingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class RemoveComponentWorldSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (RemoveComponentWorldSystem)system;			system.Owner.World.AddGlobalReactCommand<RemoveHecsComponentWorldCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<AddHecsComponentWorldCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RemoveComponentWorldSystem)system;			system.Owner.World.RemoveGlobalReactCommand<RemoveHecsComponentWorldCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<AddHecsComponentWorldCommand>(system);		}	}	public sealed class WaitingCommandsSystemsBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (WaitingCommandsSystems)system;			system.Owner.World.AddGlobalReactCommand<WaitAndEntityCallbackCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<WaitAndCallbackCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (WaitingCommandsSystems)system;			system.Owner.World.RemoveGlobalReactCommand<WaitAndEntityCallbackCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<WaitAndCallbackCommand>(system);		}	}	public sealed class AINPCSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AINPCSystem)system;			system.Owner.EntityCommandService.AddListener<NeedDecisionCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<IsDeadCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<SetDefaultStrategyCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<ChangeStrategyCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<ForceStopAICommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<ForceStartAICommand>(system, currentSystem);			currentSystem.aIStrategyComponent = currentSystem.Owner.GetOrAddComponent<AIStrategyComponent>(HMasks.AIStrategyComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AINPCSystem)system;			system.Owner.EntityCommandService.RemoveListener<NeedDecisionCommand>(system);			system.Owner.EntityCommandService.RemoveListener<IsDeadCommand>(system);			system.Owner.EntityCommandService.RemoveListener<SetDefaultStrategyCommand>(system);			system.Owner.EntityCommandService.RemoveListener<ChangeStrategyCommand>(system);			system.Owner.EntityCommandService.RemoveListener<ForceStopAICommand>(system);			system.Owner.EntityCommandService.RemoveListener<ForceStartAICommand>(system);			currentSystem.aIStrategyComponent = null;		}	}	public sealed class InputListenSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SpawnViewSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnViewSystem)system;			currentSystem.viewReferenceGameObject = currentSystem.Owner.GetOrAddComponent<ViewReferenceGameObjectComponent>(HMasks.ViewReferenceGameObjectComponent);			currentSystem.unityTransform = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>(HMasks.UnityTransformComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnViewSystem)system;			currentSystem.viewReferenceGameObject = null;			currentSystem.unityTransform = null;		}	}	public sealed class StartSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class UpdateActorByTranformSystemBindContainerForSys : ISystemSetter	{		private FieldInfo transformComponentFieldBinding = typeof(UpdateActorByTranformSystem).GetField("transformComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (UpdateActorByTranformSystem)system;			transformComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<TransformComponent>(HMasks.TransformComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpdateActorByTranformSystem)system;			transformComponentFieldBinding.SetValue(system, null);		}	}	public sealed class UpdateTranformFromActorSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UpdateTranformFromActorSystem)system;			currentSystem.transformComponent = currentSystem.Owner.GetOrAddComponent<TransformComponent>(HMasks.TransformComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpdateTranformFromActorSystem)system;			currentSystem.transformComponent = null;		}	}	public sealed class SoundGlobalSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SoundGlobalSystem)system;			system.Owner.World.AddGlobalReactCommand<PlaySoundCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopSoundCommand>(system, currentSystem);			currentSystem.volumeComponent = currentSystem.Owner.GetOrAddComponent<SoundVolumeComponent>(HMasks.SoundVolumeComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SoundGlobalSystem)system;			system.Owner.World.RemoveGlobalReactCommand<PlaySoundCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<StopSoundCommand>(system);			currentSystem.volumeComponent = null;		}	}	public sealed class HideUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (HideUISystem)system;			system.Owner.EntityCommandService.AddListener<HideUICommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (HideUISystem)system;			system.Owner.EntityCommandService.RemoveListener<HideUICommand>(system);		}	}	public sealed class UISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UISystem)system;			system.Owner.World.AddGlobalReactCommand<ShowUICommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<ShowUIOnAdditionalCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<HideUICommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<ShowUIAndHideOthersCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<HideAllUIExceptCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<UIGroupCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<CanvasReadyCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UISystem)system;			system.Owner.World.RemoveGlobalReactCommand<ShowUICommand>(system);			system.Owner.World.RemoveGlobalReactCommand<ShowUIOnAdditionalCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<HideUICommand>(system);			system.Owner.World.RemoveGlobalReactCommand<ShowUIAndHideOthersCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<HideAllUIExceptCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<UIGroupCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<CanvasReadyCommand>(system);		}	}	public sealed class CountersHolderSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CountersHolderSystem)system;			system.Owner.EntityCommandService.AddListener<AddCounterModifierCommand<float>>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<RemoveCounterModifierCommand<float>>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<ResetCountersCommand>(system, currentSystem);			currentSystem.countersHolder = currentSystem.Owner.GetOrAddComponent<CountersHolderComponent>(HMasks.CountersHolderComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CountersHolderSystem)system;			system.Owner.EntityCommandService.RemoveListener<AddCounterModifierCommand<float>>(system);			system.Owner.EntityCommandService.RemoveListener<RemoveCounterModifierCommand<float>>(system);			system.Owner.EntityCommandService.RemoveListener<ResetCountersCommand>(system);			currentSystem.countersHolder = null;		}	}	public sealed class StateUpdateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class StrategiesMainServiceSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class AnimationDoneCheckOutSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AnimationDoneCheckOutSystem)system;			system.Owner.EntityCommandService.AddListener<AnimationEventCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<AnimationDoneCheckOut>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<AnimationCycleCheckout>(system, currentSystem);			currentSystem.animationCheckOutsHolder = currentSystem.Owner.GetOrAddComponent<AnimationCheckOutsHolderComponent>(HMasks.AnimationCheckOutsHolderComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AnimationDoneCheckOutSystem)system;			system.Owner.EntityCommandService.RemoveListener<AnimationEventCommand>(system);			system.Owner.EntityCommandService.RemoveListener<AnimationDoneCheckOut>(system);			system.Owner.EntityCommandService.RemoveListener<AnimationCycleCheckout>(system);			currentSystem.animationCheckOutsHolder = null;		}	}	public sealed class AnimationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AnimationSystem)system;			system.Owner.EntityCommandService.AddListener<BoolAnimationCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<FloatAnimationCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<IntAnimationCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<TriggerAnimationCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<ViewReadyCommand>(system, currentSystem);			currentSystem.AnimatorStateComponent = currentSystem.Owner.GetOrAddComponent<AnimatorStateComponent>(HMasks.AnimatorStateComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AnimationSystem)system;			system.Owner.EntityCommandService.RemoveListener<BoolAnimationCommand>(system);			system.Owner.EntityCommandService.RemoveListener<FloatAnimationCommand>(system);			system.Owner.EntityCommandService.RemoveListener<IntAnimationCommand>(system);			system.Owner.EntityCommandService.RemoveListener<TriggerAnimationCommand>(system);			system.Owner.EntityCommandService.RemoveListener<ViewReadyCommand>(system);			currentSystem.AnimatorStateComponent = null;		}	}	public sealed class CompositeAbilitiesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CompositeAbilitiesSystem)system;			system.Owner.EntityCommandService.AddListener<ExecuteAbilityCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CompositeAbilitiesSystem)system;			system.Owner.EntityCommandService.RemoveListener<ExecuteAbilityCommand>(system);		}	}	public static partial class TypesMap	{		static partial void SetSystemSetters()		{			systemsSetters = new System.Collections.Generic.Dictionary<Type, ISystemSetter>()			{				{typeof(AbilitiesSystem), new AbilitiesSystemBindContainerForSys()},				{typeof(JobUpdateSystem), new JobUpdateSystemBindContainerForSys()},				{typeof(DestroyEntityWorldSystem), new DestroyEntityWorldSystemBindContainerForSys()},				{typeof(PoolingSystem), new PoolingSystemBindContainerForSys()},				{typeof(RemoveComponentWorldSystem), new RemoveComponentWorldSystemBindContainerForSys()},				{typeof(WaitingCommandsSystems), new WaitingCommandsSystemsBindContainerForSys()},				{typeof(AINPCSystem), new AINPCSystemBindContainerForSys()},				{typeof(InputListenSystem), new InputListenSystemBindContainerForSys()},				{typeof(SpawnViewSystem), new SpawnViewSystemBindContainerForSys()},				{typeof(StartSystem), new StartSystemBindContainerForSys()},				{typeof(UpdateActorByTranformSystem), new UpdateActorByTranformSystemBindContainerForSys()},				{typeof(UpdateTranformFromActorSystem), new UpdateTranformFromActorSystemBindContainerForSys()},				{typeof(SoundGlobalSystem), new SoundGlobalSystemBindContainerForSys()},				{typeof(HideUISystem), new HideUISystemBindContainerForSys()},				{typeof(UISystem), new UISystemBindContainerForSys()},				{typeof(CountersHolderSystem), new CountersHolderSystemBindContainerForSys()},				{typeof(StateUpdateSystem), new StateUpdateSystemBindContainerForSys()},				{typeof(StrategiesMainServiceSystem), new StrategiesMainServiceSystemBindContainerForSys()},				{typeof(AnimationDoneCheckOutSystem), new AnimationDoneCheckOutSystemBindContainerForSys()},				{typeof(AnimationSystem), new AnimationSystemBindContainerForSys()},				{typeof(CompositeAbilitiesSystem), new CompositeAbilitiesSystemBindContainerForSys()},			};		}	}}