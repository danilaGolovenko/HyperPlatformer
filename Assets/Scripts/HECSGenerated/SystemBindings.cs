using System;using Systems;using Commands;using Components;using System.Reflection;namespace HECSFramework.Core{	public sealed class BossAnimationSystemBindContainerForSys : ISystemSetter	{		private FieldInfo currentSpeedComponentFieldBinding = typeof(BossAnimationSystem).GetField("currentSpeedComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo speedCoeffComponentFieldBinding = typeof(BossAnimationSystem).GetField("speedCoeffComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (BossAnimationSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.DamageCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Commands.EventStateAnimationCommand>(system, currentSystem);			currentSpeedComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CurrentSpeedComponent>(HMasks.CurrentSpeedComponent));			speedCoeffComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpeedCoeffComponent>(HMasks.SpeedCoeffComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (BossAnimationSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.DamageCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Commands.EventStateAnimationCommand>(system);			currentSpeedComponentFieldBinding.SetValue(system, null);			speedCoeffComponentFieldBinding.SetValue(system, null);		}	}	public sealed class BossTriggerRangeUpdateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class CharacterBehaviourSystemBindContainerForSys : ISystemSetter	{		private FieldInfo stateComponentFieldBinding = typeof(CharacterBehaviourSystem).GetField("stateComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo rangeAttackComponentFieldBinding = typeof(CharacterBehaviourSystem).GetField("rangeAttackComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo speedComponentFieldBinding = typeof(CharacterBehaviourSystem).GetField("speedComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (CharacterBehaviourSystem)system;			stateComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CharacterStateComponent>(HMasks.CharacterStateComponent));			rangeAttackComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<RangeAttackComponent>(HMasks.RangeAttackComponent));			speedComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpeedCoeffComponent>(HMasks.SpeedCoeffComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CharacterBehaviourSystem)system;			stateComponentFieldBinding.SetValue(system, null);			rangeAttackComponentFieldBinding.SetValue(system, null);			speedComponentFieldBinding.SetValue(system, null);		}	}	public sealed class CheckOpenConditionSystemBindContainerForSys : ISystemSetter	{		private FieldInfo requiredItemsComponentFieldBinding = typeof(CheckOpenConditionSystem).GetField("requiredItemsComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (CheckOpenConditionSystem)system;			system.Owner.EntityCommandService.AddListener<Trigger2dEnterCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Trigger2dExitCommand>(system, currentSystem);			requiredItemsComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<RequiredItemsComponent>(HMasks.RequiredItemsComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CheckOpenConditionSystem)system;			system.Owner.EntityCommandService.RemoveListener<Trigger2dEnterCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Trigger2dExitCommand>(system);			requiredItemsComponentFieldBinding.SetValue(system, null);		}	}	public sealed class ChomperAnimationSystemBindContainerForSys : ISystemSetter	{		private FieldInfo currentSpeedComponentFieldBinding = typeof(ChomperAnimationSystem).GetField("currentSpeedComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (ChomperAnimationSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.DamageCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Commands.EventStateAnimationCommand>(system, currentSystem);			currentSpeedComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CurrentSpeedComponent>(HMasks.CurrentSpeedComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ChomperAnimationSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.DamageCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Commands.EventStateAnimationCommand>(system);			currentSpeedComponentFieldBinding.SetValue(system, null);		}	}	public sealed class CooldownProcessingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class DeathHandlerSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DeathHandlerSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.DeathCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Commands.EventStateAnimationCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DeathHandlerSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.DeathCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Commands.EventStateAnimationCommand>(system);		}	}	public sealed class EnemyAttackSystemBindContainerForSys : ISystemSetter	{		private FieldInfo meleeAttackComponentFieldBinding = typeof(EnemyAttackSystem).GetField("meleeAttackComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (EnemyAttackSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.AnimationEventCommand>(system, currentSystem);			meleeAttackComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<MeleeAttackComponent>(HMasks.MeleeAttackComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (EnemyAttackSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.AnimationEventCommand>(system);			meleeAttackComponentFieldBinding.SetValue(system, null);		}	}	public sealed class GravitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (GravitySystem)system;			system.Owner.World.AddGlobalReactComponent<GroundedTagComponent>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (GravitySystem)system;			system.Owner.World.RemoveGlobalReactComponent<GroundedTagComponent>(system);		}	}	public sealed class InitializationCameraFollowSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (InitializationCameraFollowSystem)system;			system.Owner.World.AddGlobalReactComponent<PlayerHolderComponent>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (InitializationCameraFollowSystem)system;			system.Owner.World.RemoveGlobalReactComponent<PlayerHolderComponent>(system);		}	}	public sealed class InventoryInitializationSystemBindContainerForSys : ISystemSetter	{		private FieldInfo startInventoryComponentFieldBinding = typeof(InventoryInitializationSystem).GetField("startInventoryComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo playerInventoryComponentFieldBinding = typeof(InventoryInitializationSystem).GetField("playerInventoryComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (InventoryInitializationSystem)system;			startInventoryComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<StartInventoryComponent>(HMasks.StartInventoryComponent));			playerInventoryComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<PlayerInventoryComponent>(HMasks.PlayerInventoryComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (InventoryInitializationSystem)system;			startInventoryComponentFieldBinding.SetValue(system, null);			playerInventoryComponentFieldBinding.SetValue(system, null);		}	}	public sealed class JumpingSystemBindContainerForSys : ISystemSetter	{		private FieldInfo jumpStartSpeedComponentFieldBinding = typeof(JumpingSystem).GetField("jumpStartSpeedComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo currentSpeedComponentFieldBinding = typeof(JumpingSystem).GetField("currentSpeedComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (JumpingSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.InputStartedCommand>(system, currentSystem);			jumpStartSpeedComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<JumpStartSpeedComponent>(HMasks.JumpStartSpeedComponent));			currentSpeedComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CurrentSpeedComponent>(HMasks.CurrentSpeedComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (JumpingSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.InputStartedCommand>(system);			jumpStartSpeedComponentFieldBinding.SetValue(system, null);			currentSpeedComponentFieldBinding.SetValue(system, null);		}	}	public sealed class KeyDisappearanceSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (KeyDisappearanceSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.EventStateAnimationCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (KeyDisappearanceSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.EventStateAnimationCommand>(system);		}	}	public sealed class KilledEnemiesSystemBindContainerForSys : ISystemSetter	{		private FieldInfo playerHolderComponentFieldBinding = typeof(KilledEnemiesSystem).GetField("playerHolderComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (KilledEnemiesSystem)system;			system.Owner.World.AddGlobalReactCommand<Commands.IncreaseKilledEnemiesAmountCommand>(system, currentSystem);			playerHolderComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<PlayerHolderComponent>(HMasks.PlayerHolderComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (KilledEnemiesSystem)system;			system.Owner.World.RemoveGlobalReactCommand<Commands.IncreaseKilledEnemiesAmountCommand>(system);			playerHolderComponentFieldBinding.SetValue(system, null);		}	}	public sealed class MovingEnemySystemBindContainerForSys : ISystemSetter	{		private FieldInfo currentSpeedFieldBinding = typeof(MovingEnemySystem).GetField("currentSpeed", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo wayComponentFieldBinding = typeof(MovingEnemySystem).GetField("wayComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo speedCoeffComponentFieldBinding = typeof(MovingEnemySystem).GetField("speedCoeffComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (MovingEnemySystem)system;			system.Owner.RegisterComponentListenersService.AddListener<StopMovingComponent>(system, currentSystem);			currentSpeedFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CurrentSpeedComponent>(HMasks.CurrentSpeedComponent));			wayComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<WayComponent>(HMasks.WayComponent));			speedCoeffComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpeedCoeffComponent>(HMasks.SpeedCoeffComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (MovingEnemySystem)system;			system.Owner.RegisterComponentListenersService.RemoveListener<StopMovingComponent>(system);			currentSpeedFieldBinding.SetValue(system, null);			wayComponentFieldBinding.SetValue(system, null);			speedCoeffComponentFieldBinding.SetValue(system, null);		}	}	public sealed class MovingPlatformSystemBindContainerForSys : ISystemSetter	{		private FieldInfo wayComponentFieldBinding = typeof(MovingPlatformSystem).GetField("wayComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo speedCoeffComponentFieldBinding = typeof(MovingPlatformSystem).GetField("speedCoeffComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (MovingPlatformSystem)system;			wayComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<WayComponent>(HMasks.WayComponent));			speedCoeffComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpeedCoeffComponent>(HMasks.SpeedCoeffComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (MovingPlatformSystem)system;			wayComponentFieldBinding.SetValue(system, null);			speedCoeffComponentFieldBinding.SetValue(system, null);		}	}	public sealed class MovingSystemBindContainerForSys : ISystemSetter	{		private FieldInfo currentSpeedFieldBinding = typeof(MovingSystem).GetField("currentSpeed", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo speedCoeffFieldBinding = typeof(MovingSystem).GetField("speedCoeff", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (MovingSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.InputCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Commands.InputEndedCommand>(system, currentSystem);			system.Owner.RegisterComponentListenersService.AddListener<StopMovingComponent>(system, currentSystem);			currentSpeedFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CurrentSpeedComponent>(HMasks.CurrentSpeedComponent));			speedCoeffFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpeedCoeffComponent>(HMasks.SpeedCoeffComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (MovingSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.InputCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Commands.InputEndedCommand>(system);			system.Owner.RegisterComponentListenersService.RemoveListener<StopMovingComponent>(system);			currentSpeedFieldBinding.SetValue(system, null);			speedCoeffFieldBinding.SetValue(system, null);		}	}	public sealed class PickUpSystemBindContainerForSys : ISystemSetter	{		private FieldInfo playerHolderComponentFieldBinding = typeof(PickUpSystem).GetField("playerHolderComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (PickUpSystem)system;			system.Owner.EntityCommandService.AddListener<Trigger2dEnterCommand>(system, currentSystem);			playerHolderComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<PlayerHolderComponent>(HMasks.PlayerHolderComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PickUpSystem)system;			system.Owner.EntityCommandService.RemoveListener<Trigger2dEnterCommand>(system);			playerHolderComponentFieldBinding.SetValue(system, null);		}	}	public sealed class PlatformCatchPlayerSystemBindContainerForSys : ISystemSetter	{		private FieldInfo catchesListComponentFieldBinding = typeof(PlatformCatchPlayerSystem).GetField("catchesListComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (PlatformCatchPlayerSystem)system;			system.Owner.EntityCommandService.AddListener<Trigger2dEnterCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Trigger2dExitCommand>(system, currentSystem);			catchesListComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CatchesListComponent>(HMasks.CatchesListComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PlatformCatchPlayerSystem)system;			system.Owner.EntityCommandService.RemoveListener<Trigger2dEnterCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Trigger2dExitCommand>(system);			catchesListComponentFieldBinding.SetValue(system, null);		}	}	public sealed class PlayerAnimationSystemBindContainerForSys : ISystemSetter	{		private FieldInfo currentSpeedComponentFieldBinding = typeof(PlayerAnimationSystem).GetField("currentSpeedComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo speedCoeffComponentFieldBinding = typeof(PlayerAnimationSystem).GetField("speedCoeffComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (PlayerAnimationSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.InputCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Commands.InputEndedCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Commands.DamageCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Commands.EventStateAnimationCommand>(system, currentSystem);			currentSpeedComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CurrentSpeedComponent>(HMasks.CurrentSpeedComponent));			speedCoeffComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpeedCoeffComponent>(HMasks.SpeedCoeffComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PlayerAnimationSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.InputCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Commands.InputEndedCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Commands.DamageCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Commands.EventStateAnimationCommand>(system);			currentSpeedComponentFieldBinding.SetValue(system, null);			speedCoeffComponentFieldBinding.SetValue(system, null);		}	}	public sealed class PlayerMeleeAttackSystemBindContainerForSys : ISystemSetter	{		private FieldInfo meleeAttackComponentFieldBinding = typeof(PlayerMeleeAttackSystem).GetField("meleeAttackComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (PlayerMeleeAttackSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.InputStartedCommand>(system, currentSystem);			meleeAttackComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<MeleeAttackComponent>(HMasks.MeleeAttackComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PlayerMeleeAttackSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.InputStartedCommand>(system);			meleeAttackComponentFieldBinding.SetValue(system, null);		}	}	public sealed class PortalSwitchSystemBindContainerForSys : ISystemSetter	{		private FieldInfo portalScenesComponentFieldBinding = typeof(PortalSwitchSystem).GetField("portalScenesComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo spawnPointComponentFieldBinding = typeof(PortalSwitchSystem).GetField("spawnPointComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (PortalSwitchSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.Trigger2dEnterCommand>(system, currentSystem);			portalScenesComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<PortalScenesComponent>(HMasks.PortalScenesComponent));			spawnPointComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpawnPointComponent>(HMasks.SpawnPointComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PortalSwitchSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.Trigger2dEnterCommand>(system);			portalScenesComponentFieldBinding.SetValue(system, null);			spawnPointComponentFieldBinding.SetValue(system, null);		}	}	public sealed class RangeAttackSystemBindContainerForSys : ISystemSetter	{		private FieldInfo rangeAttackComponentFieldBinding = typeof(RangeAttackSystem).GetField("rangeAttackComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo warheadHolderComponentFieldBinding = typeof(RangeAttackSystem).GetField("warheadHolderComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo waitComponentFieldBinding = typeof(RangeAttackSystem).GetField("waitComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (RangeAttackSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.AnimationEventCommand>(system, currentSystem);			rangeAttackComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<RangeAttackComponent>(HMasks.RangeAttackComponent));			warheadHolderComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<WarheadHolderComponent>(HMasks.WarheadHolderComponent));			waitComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<WaitComponent>(HMasks.WaitComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RangeAttackSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.AnimationEventCommand>(system);			rangeAttackComponentFieldBinding.SetValue(system, null);			warheadHolderComponentFieldBinding.SetValue(system, null);			waitComponentFieldBinding.SetValue(system, null);		}	}	public sealed class RemoveEntityAfterDelaySystemBindContainerForSys : ISystemSetter	{		private FieldInfo waitComponentFieldBinding = typeof(RemoveEntityAfterDelaySystem).GetField("waitComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (RemoveEntityAfterDelaySystem)system;			waitComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<WaitComponent>(HMasks.WaitComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RemoveEntityAfterDelaySystem)system;			waitComponentFieldBinding.SetValue(system, null);		}	}	public sealed class ShowWinUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ShowWinUISystem)system;			system.Owner.World.AddGlobalReactCommand<Commands.WinCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ShowWinUISystem)system;			system.Owner.World.RemoveGlobalReactCommand<Commands.WinCommand>(system);		}	}	public sealed class SkyRockMovingSystemBindContainerForSys : ISystemSetter	{		private FieldInfo speedCoeffComponentFieldBinding = typeof(SkyRockMovingSystem).GetField("speedCoeffComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (SkyRockMovingSystem)system;			speedCoeffComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpeedCoeffComponent>(HMasks.SpeedCoeffComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SkyRockMovingSystem)system;			speedCoeffComponentFieldBinding.SetValue(system, null);		}	}	public sealed class SkyRockTouchSystemBindContainerForSys : ISystemSetter	{		private FieldInfo skyRockComponentFieldBinding = typeof(SkyRockTouchSystem).GetField("skyRockComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (SkyRockTouchSystem)system;			system.Owner.EntityCommandService.AddListener<Trigger2dEnterCommand>(system, currentSystem);			skyRockComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SkyRockComponent>(HMasks.SkyRockComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SkyRockTouchSystem)system;			system.Owner.EntityCommandService.RemoveListener<Trigger2dEnterCommand>(system);			skyRockComponentFieldBinding.SetValue(system, null);		}	}	public sealed class SpawnSkyRocksSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnSkyRocksSystem)system;			currentSystem.skyRockHolderComponent = currentSystem.Owner.GetOrAddComponent<SkyRockHolderComponent>(HMasks.SkyRockHolderComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnSkyRocksSystem)system;			currentSystem.skyRockHolderComponent = null;		}	}	public sealed class SpitterAnimationSystemBindContainerForSys : ISystemSetter	{		private FieldInfo currentSpeedComponentFieldBinding = typeof(SpitterAnimationSystem).GetField("currentSpeedComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (SpitterAnimationSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.DamageCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<Commands.EventStateAnimationCommand>(system, currentSystem);			currentSpeedComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CurrentSpeedComponent>(HMasks.CurrentSpeedComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpitterAnimationSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.DamageCommand>(system);			system.Owner.EntityCommandService.RemoveListener<Commands.EventStateAnimationCommand>(system);			currentSpeedComponentFieldBinding.SetValue(system, null);		}	}	public sealed class SwitchSceneSystemBindContainerForSys : ISystemSetter	{		private FieldInfo sceneHolderComponentFieldBinding = typeof(SwitchSceneSystem).GetField("sceneHolderComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo currentSceneIdentifierComponentFieldBinding = typeof(SwitchSceneSystem).GetField("currentSceneIdentifierComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (SwitchSceneSystem)system;			system.Owner.World.AddGlobalReactCommand<Commands.SwitchSceneCommand>(system, currentSystem);			sceneHolderComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SceneHolderComponent>(HMasks.SceneHolderComponent));			currentSceneIdentifierComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CurrentSceneIdentifierComponent>(HMasks.CurrentSceneIdentifierComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SwitchSceneSystem)system;			system.Owner.World.RemoveGlobalReactCommand<Commands.SwitchSceneCommand>(system);			sceneHolderComponentFieldBinding.SetValue(system, null);			currentSceneIdentifierComponentFieldBinding.SetValue(system, null);		}	}	public sealed class TagingGroundedSystemBindContainerForSys : ISystemSetter	{		private FieldInfo subjectToGravityTagComponentFieldBinding = typeof(TagingGroundedSystem).GetField("subjectToGravityTagComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (TagingGroundedSystem)system;			subjectToGravityTagComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SubjectToGravityTagComponent>(HMasks.SubjectToGravityTagComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (TagingGroundedSystem)system;			subjectToGravityTagComponentFieldBinding.SetValue(system, null);		}	}	public sealed class TakeDamageSystemBindContainerForSys : ISystemSetter	{		private FieldInfo waitComponentFieldBinding = typeof(TakeDamageSystem).GetField("waitComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (TakeDamageSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.DamageCommand>(system, currentSystem);			waitComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<WaitComponent>(HMasks.WaitComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (TakeDamageSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.DamageCommand>(system);			waitComponentFieldBinding.SetValue(system, null);		}	}	public sealed class WarheadMovingSystemBindContainerForSys : ISystemSetter	{		private FieldInfo speedCoeffComponentFieldBinding = typeof(WarheadMovingSystem).GetField("speedCoeffComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (WarheadMovingSystem)system;			speedCoeffComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpeedCoeffComponent>(HMasks.SpeedCoeffComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (WarheadMovingSystem)system;			speedCoeffComponentFieldBinding.SetValue(system, null);		}	}	public sealed class WarheadTouchSystemBindContainerForSys : ISystemSetter	{		private FieldInfo warheadComponentFieldBinding = typeof(WarheadTouchSystem).GetField("warheadComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (WarheadTouchSystem)system;			system.Owner.EntityCommandService.AddListener<Trigger2dEnterCommand>(system, currentSystem);			warheadComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<WarheadComponent>(HMasks.WarheadComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (WarheadTouchSystem)system;			system.Owner.EntityCommandService.RemoveListener<Trigger2dEnterCommand>(system);			warheadComponentFieldBinding.SetValue(system, null);		}	}	public sealed class WaterDamageSystemBindContainerForSys : ISystemSetter	{		private FieldInfo damageAmountComponentFieldBinding = typeof(WaterDamageSystem).GetField("damageAmountComponent", BindingFlags.Instance | BindingFlags.NonPublic);		private FieldInfo spawnPointComponentFieldBinding = typeof(WaterDamageSystem).GetField("spawnPointComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (WaterDamageSystem)system;			system.Owner.EntityCommandService.AddListener<Trigger2dEnterCommand>(system, currentSystem);			damageAmountComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<DamageAmountComponent>(HMasks.DamageAmountComponent));			spawnPointComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<SpawnPointComponent>(HMasks.SpawnPointComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (WaterDamageSystem)system;			system.Owner.EntityCommandService.RemoveListener<Trigger2dEnterCommand>(system);			damageAmountComponentFieldBinding.SetValue(system, null);			spawnPointComponentFieldBinding.SetValue(system, null);		}	}	public sealed class CharacterSpawnSystemBindContainerForSys : ISystemSetter	{		private FieldInfo characterContainerHolderComponentFieldBinding = typeof(CharacterSpawnSystem).GetField("characterContainerHolderComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (CharacterSpawnSystem)system;			system.Owner.World.AddGlobalReactCommand<LoadedSceneCommand>(system, currentSystem);			characterContainerHolderComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<CharacterContainerHolderComponent>(HMasks.CharacterContainerHolderComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CharacterSpawnSystem)system;			system.Owner.World.RemoveGlobalReactCommand<LoadedSceneCommand>(system);			characterContainerHolderComponentFieldBinding.SetValue(system, null);		}	}	public sealed class EnemySpawnSystemBindContainerForSys : ISystemSetter	{		private FieldInfo enemyContainerComponentFieldBinding = typeof(EnemySpawnSystem).GetField("enemyContainerComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (EnemySpawnSystem)system;			system.Owner.World.AddGlobalReactCommand<Commands.EnemySpawnCommand>(system, currentSystem);			enemyContainerComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<EnemyContainerComponent>(HMasks.EnemyContainerComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (EnemySpawnSystem)system;			system.Owner.World.RemoveGlobalReactCommand<Commands.EnemySpawnCommand>(system);			enemyContainerComponentFieldBinding.SetValue(system, null);		}	}	public sealed class ItemsSpawnSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ItemsSpawnSystem)system;			system.Owner.World.AddGlobalReactCommand<LoadedSceneCommand>(system, currentSystem);			currentSystem.itemsOnSceneComponent = currentSystem.Owner.GetOrAddComponent<ItemsOnSceneComponent>(HMasks.ItemsOnSceneComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ItemsSpawnSystem)system;			system.Owner.World.RemoveGlobalReactCommand<LoadedSceneCommand>(system);			currentSystem.itemsOnSceneComponent = null;		}	}	public sealed class RespawnSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (RespawnSystem)system;			system.Owner.EntityCommandService.AddListener<Commands.RespawnCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RespawnSystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.RespawnCommand>(system);		}	}	public sealed class DialogueUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DialogueUISystem)system;			system.Owner.EntityCommandService.AddListener<Commands.InitDialogueUITextCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DialogueUISystem)system;			system.Owner.EntityCommandService.RemoveListener<Commands.InitDialogueUITextCommand>(system);		}	}	public sealed class DrawPickUpUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DrawPickUpUISystem)system;			system.Owner.World.AddGlobalReactCommand<Commands.OnPickUpItemCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DrawPickUpUISystem)system;			system.Owner.World.RemoveGlobalReactCommand<Commands.OnPickUpItemCommand>(system);		}	}	public sealed class EnemyHealthUISystemBindContainerForSys : ISystemSetter	{		private FieldInfo enemyHolderComponentFieldBinding = typeof(EnemyHealthUISystem).GetField("enemyHolderComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (EnemyHealthUISystem)system;			system.Owner.EntityCommandService.AddListener<InitEnemyHealthBarCommand>(system, currentSystem);			enemyHolderComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<EntityHolderComponent>(HMasks.EntityHolderComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (EnemyHealthUISystem)system;			system.Owner.EntityCommandService.RemoveListener<InitEnemyHealthBarCommand>(system);			enemyHolderComponentFieldBinding.SetValue(system, null);		}	}	public sealed class HealthUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class KilledEnemiesUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class PlayerInventoryUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (PlayerInventoryUISystem)system;			system.Owner.World.AddGlobalReactCommand<Commands.OnPickUpItemCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PlayerInventoryUISystem)system;			system.Owner.World.RemoveGlobalReactCommand<Commands.OnPickUpItemCommand>(system);		}	}	public sealed class SpawnEnemyHealthUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnEnemyHealthUISystem)system;			system.Owner.World.AddGlobalReactComponent<HealthBarTagComponent>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnEnemyHealthUISystem)system;			system.Owner.World.RemoveGlobalReactComponent<HealthBarTagComponent>(system);		}	}	public sealed class SpawnHealthUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnHealthUISystem)system;			system.Owner.World.AddGlobalReactComponent<PlayerHolderComponent>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnHealthUISystem)system;			system.Owner.World.RemoveGlobalReactComponent<PlayerHolderComponent>(system);		}	}	public sealed class SpawnInventoryUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnInventoryUISystem)system;			system.Owner.World.AddGlobalReactComponent<PlayerHolderComponent>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnInventoryUISystem)system;			system.Owner.World.RemoveGlobalReactComponent<PlayerHolderComponent>(system);		}	}	public sealed class SpawnKilledEnemiesUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnKilledEnemiesUISystem)system;			system.Owner.World.AddGlobalReactComponent<PlayerHolderComponent>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnKilledEnemiesUISystem)system;			system.Owner.World.RemoveGlobalReactComponent<PlayerHolderComponent>(system);		}	}	public sealed class AbilitiesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AbilitiesSystem)system;			system.Owner.EntityCommandService.AddListener<ExecuteAbilityByIDCommand>(system, currentSystem);			currentSystem.abilitiesHolderComponent = currentSystem.Owner.GetOrAddComponent<AbilitiesHolderComponent>(HMasks.AbilitiesHolderComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AbilitiesSystem)system;			system.Owner.EntityCommandService.RemoveListener<ExecuteAbilityByIDCommand>(system);			currentSystem.abilitiesHolderComponent = null;		}	}	public sealed class JobUpdateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class DestroyEntityWorldSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DestroyEntityWorldSystem)system;			system.Owner.World.AddGlobalReactCommand<DestroyEntityWorldCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DestroyEntityWorldSystem)system;			system.Owner.World.RemoveGlobalReactCommand<DestroyEntityWorldCommand>(system);		}	}	public sealed class PoolingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class RemoveComponentWorldSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (RemoveComponentWorldSystem)system;			system.Owner.World.AddGlobalReactCommand<RemoveHecsComponentWorldCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<AddHecsComponentWorldCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RemoveComponentWorldSystem)system;			system.Owner.World.RemoveGlobalReactCommand<RemoveHecsComponentWorldCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<AddHecsComponentWorldCommand>(system);		}	}	public sealed class WaitingCommandsSystemsBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (WaitingCommandsSystems)system;			system.Owner.World.AddGlobalReactCommand<WaitAndEntityCallbackCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<WaitAndCallbackCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (WaitingCommandsSystems)system;			system.Owner.World.RemoveGlobalReactCommand<WaitAndEntityCallbackCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<WaitAndCallbackCommand>(system);		}	}	public sealed class AINPCSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AINPCSystem)system;			system.Owner.EntityCommandService.AddListener<NeedDecisionCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<IsDeadCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<SetDefaultStrategyCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<ChangeStrategyCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<ForceStopAICommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<ForceStartAICommand>(system, currentSystem);			currentSystem.aIStrategyComponent = currentSystem.Owner.GetOrAddComponent<AIStrategyComponent>(HMasks.AIStrategyComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AINPCSystem)system;			system.Owner.EntityCommandService.RemoveListener<NeedDecisionCommand>(system);			system.Owner.EntityCommandService.RemoveListener<IsDeadCommand>(system);			system.Owner.EntityCommandService.RemoveListener<SetDefaultStrategyCommand>(system);			system.Owner.EntityCommandService.RemoveListener<ChangeStrategyCommand>(system);			system.Owner.EntityCommandService.RemoveListener<ForceStopAICommand>(system);			system.Owner.EntityCommandService.RemoveListener<ForceStartAICommand>(system);			currentSystem.aIStrategyComponent = null;		}	}	public sealed class InputListenSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SpawnViewSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnViewSystem)system;			currentSystem.viewReferenceGameObject = currentSystem.Owner.GetOrAddComponent<ViewReferenceGameObjectComponent>(HMasks.ViewReferenceGameObjectComponent);			currentSystem.unityTransform = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>(HMasks.UnityTransformComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnViewSystem)system;			currentSystem.viewReferenceGameObject = null;			currentSystem.unityTransform = null;		}	}	public sealed class StartSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class UpdateActorByTranformSystemBindContainerForSys : ISystemSetter	{		private FieldInfo transformComponentFieldBinding = typeof(UpdateActorByTranformSystem).GetField("transformComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (UpdateActorByTranformSystem)system;			transformComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<TransformComponent>(HMasks.TransformComponent));		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpdateActorByTranformSystem)system;			transformComponentFieldBinding.SetValue(system, null);		}	}	public sealed class UpdateTranformFromActorSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UpdateTranformFromActorSystem)system;			currentSystem.transformComponent = currentSystem.Owner.GetOrAddComponent<TransformComponent>(HMasks.TransformComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpdateTranformFromActorSystem)system;			currentSystem.transformComponent = null;		}	}	public sealed class SoundGlobalSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SoundGlobalSystem)system;			system.Owner.World.AddGlobalReactCommand<PlaySoundCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopSoundCommand>(system, currentSystem);			currentSystem.volumeComponent = currentSystem.Owner.GetOrAddComponent<SoundVolumeComponent>(HMasks.SoundVolumeComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SoundGlobalSystem)system;			system.Owner.World.RemoveGlobalReactCommand<PlaySoundCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<StopSoundCommand>(system);			currentSystem.volumeComponent = null;		}	}	public sealed class HideUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (HideUISystem)system;			system.Owner.EntityCommandService.AddListener<HideUICommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (HideUISystem)system;			system.Owner.EntityCommandService.RemoveListener<HideUICommand>(system);		}	}	public sealed class UISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UISystem)system;			system.Owner.World.AddGlobalReactCommand<ShowUICommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<ShowUIOnAdditionalCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<HideUICommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<ShowUIAndHideOthersCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<HideAllUIExceptCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<UIGroupCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<CanvasReadyCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UISystem)system;			system.Owner.World.RemoveGlobalReactCommand<ShowUICommand>(system);			system.Owner.World.RemoveGlobalReactCommand<ShowUIOnAdditionalCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<HideUICommand>(system);			system.Owner.World.RemoveGlobalReactCommand<ShowUIAndHideOthersCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<HideAllUIExceptCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<UIGroupCommand>(system);			system.Owner.World.RemoveGlobalReactCommand<CanvasReadyCommand>(system);		}	}	public sealed class CountersHolderSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CountersHolderSystem)system;			system.Owner.EntityCommandService.AddListener<AddCounterModifierCommand<float>>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<RemoveCounterModifierCommand<float>>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<ResetCountersCommand>(system, currentSystem);			currentSystem.countersHolder = currentSystem.Owner.GetOrAddComponent<CountersHolderComponent>(HMasks.CountersHolderComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CountersHolderSystem)system;			system.Owner.EntityCommandService.RemoveListener<AddCounterModifierCommand<float>>(system);			system.Owner.EntityCommandService.RemoveListener<RemoveCounterModifierCommand<float>>(system);			system.Owner.EntityCommandService.RemoveListener<ResetCountersCommand>(system);			currentSystem.countersHolder = null;		}	}	public sealed class StateUpdateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class StrategiesMainServiceSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class AnimationDoneCheckOutSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AnimationDoneCheckOutSystem)system;			system.Owner.EntityCommandService.AddListener<AnimationEventCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<AnimationDoneCheckOut>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<AnimationCycleCheckout>(system, currentSystem);			currentSystem.animationCheckOutsHolder = currentSystem.Owner.GetOrAddComponent<AnimationCheckOutsHolderComponent>(HMasks.AnimationCheckOutsHolderComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AnimationDoneCheckOutSystem)system;			system.Owner.EntityCommandService.RemoveListener<AnimationEventCommand>(system);			system.Owner.EntityCommandService.RemoveListener<AnimationDoneCheckOut>(system);			system.Owner.EntityCommandService.RemoveListener<AnimationCycleCheckout>(system);			currentSystem.animationCheckOutsHolder = null;		}	}	public sealed class AnimationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AnimationSystem)system;			system.Owner.EntityCommandService.AddListener<BoolAnimationCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<FloatAnimationCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<IntAnimationCommand>(system, currentSystem);			system.Owner.EntityCommandService.AddListener<TriggerAnimationCommand>(system, currentSystem);			currentSystem.AnimatorStateComponent = currentSystem.Owner.GetOrAddComponent<AnimatorStateComponent>(HMasks.AnimatorStateComponent);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AnimationSystem)system;			system.Owner.EntityCommandService.RemoveListener<BoolAnimationCommand>(system);			system.Owner.EntityCommandService.RemoveListener<FloatAnimationCommand>(system);			system.Owner.EntityCommandService.RemoveListener<IntAnimationCommand>(system);			system.Owner.EntityCommandService.RemoveListener<TriggerAnimationCommand>(system);			currentSystem.AnimatorStateComponent = null;		}	}	public sealed class CompositeAbilitiesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CompositeAbilitiesSystem)system;			system.Owner.EntityCommandService.AddListener<ExecuteAbilityCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CompositeAbilitiesSystem)system;			system.Owner.EntityCommandService.RemoveListener<ExecuteAbilityCommand>(system);		}	}	public sealed class ChargeAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (ChargeAbilitySystem)system;			system.Owner.EntityCommandService.AddListener<ExecuteAbilityCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (ChargeAbilitySystem)system;			system.Owner.EntityCommandService.RemoveListener<ExecuteAbilityCommand>(system);		}	}	public sealed class PunchAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (PunchAbilitySystem)system;			system.Owner.EntityCommandService.AddListener<ExecuteAbilityCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PunchAbilitySystem)system;			system.Owner.EntityCommandService.RemoveListener<ExecuteAbilityCommand>(system);		}	}	public sealed class RockfallAbilitySystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (RockfallAbilitySystem)system;			system.Owner.EntityCommandService.AddListener<ExecuteAbilityCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RockfallAbilitySystem)system;			system.Owner.EntityCommandService.RemoveListener<ExecuteAbilityCommand>(system);		}	}	public static partial class TypesMap	{		static partial void SetSystemSetters()		{			systemsSetters = new System.Collections.Generic.Dictionary<Type, ISystemSetter>()			{				{typeof(BossAnimationSystem), new BossAnimationSystemBindContainerForSys()},				{typeof(BossTriggerRangeUpdateSystem), new BossTriggerRangeUpdateSystemBindContainerForSys()},				{typeof(CharacterBehaviourSystem), new CharacterBehaviourSystemBindContainerForSys()},				{typeof(CheckOpenConditionSystem), new CheckOpenConditionSystemBindContainerForSys()},				{typeof(ChomperAnimationSystem), new ChomperAnimationSystemBindContainerForSys()},				{typeof(CooldownProcessingSystem), new CooldownProcessingSystemBindContainerForSys()},				{typeof(DeathHandlerSystem), new DeathHandlerSystemBindContainerForSys()},				{typeof(EnemyAttackSystem), new EnemyAttackSystemBindContainerForSys()},				{typeof(GravitySystem), new GravitySystemBindContainerForSys()},				{typeof(InitializationCameraFollowSystem), new InitializationCameraFollowSystemBindContainerForSys()},				{typeof(InventoryInitializationSystem), new InventoryInitializationSystemBindContainerForSys()},				{typeof(JumpingSystem), new JumpingSystemBindContainerForSys()},				{typeof(KeyDisappearanceSystem), new KeyDisappearanceSystemBindContainerForSys()},				{typeof(KilledEnemiesSystem), new KilledEnemiesSystemBindContainerForSys()},				{typeof(MovingEnemySystem), new MovingEnemySystemBindContainerForSys()},				{typeof(MovingPlatformSystem), new MovingPlatformSystemBindContainerForSys()},				{typeof(MovingSystem), new MovingSystemBindContainerForSys()},				{typeof(PickUpSystem), new PickUpSystemBindContainerForSys()},				{typeof(PlatformCatchPlayerSystem), new PlatformCatchPlayerSystemBindContainerForSys()},				{typeof(PlayerAnimationSystem), new PlayerAnimationSystemBindContainerForSys()},				{typeof(PlayerMeleeAttackSystem), new PlayerMeleeAttackSystemBindContainerForSys()},				{typeof(PortalSwitchSystem), new PortalSwitchSystemBindContainerForSys()},				{typeof(RangeAttackSystem), new RangeAttackSystemBindContainerForSys()},				{typeof(RemoveEntityAfterDelaySystem), new RemoveEntityAfterDelaySystemBindContainerForSys()},				{typeof(ShowWinUISystem), new ShowWinUISystemBindContainerForSys()},				{typeof(SkyRockMovingSystem), new SkyRockMovingSystemBindContainerForSys()},				{typeof(SkyRockTouchSystem), new SkyRockTouchSystemBindContainerForSys()},				{typeof(SpawnSkyRocksSystem), new SpawnSkyRocksSystemBindContainerForSys()},				{typeof(SpitterAnimationSystem), new SpitterAnimationSystemBindContainerForSys()},				{typeof(SwitchSceneSystem), new SwitchSceneSystemBindContainerForSys()},				{typeof(TagingGroundedSystem), new TagingGroundedSystemBindContainerForSys()},				{typeof(TakeDamageSystem), new TakeDamageSystemBindContainerForSys()},				{typeof(WarheadMovingSystem), new WarheadMovingSystemBindContainerForSys()},				{typeof(WarheadTouchSystem), new WarheadTouchSystemBindContainerForSys()},				{typeof(WaterDamageSystem), new WaterDamageSystemBindContainerForSys()},				{typeof(CharacterSpawnSystem), new CharacterSpawnSystemBindContainerForSys()},				{typeof(EnemySpawnSystem), new EnemySpawnSystemBindContainerForSys()},				{typeof(ItemsSpawnSystem), new ItemsSpawnSystemBindContainerForSys()},				{typeof(RespawnSystem), new RespawnSystemBindContainerForSys()},				{typeof(DialogueUISystem), new DialogueUISystemBindContainerForSys()},				{typeof(DrawPickUpUISystem), new DrawPickUpUISystemBindContainerForSys()},				{typeof(EnemyHealthUISystem), new EnemyHealthUISystemBindContainerForSys()},				{typeof(HealthUISystem), new HealthUISystemBindContainerForSys()},				{typeof(KilledEnemiesUISystem), new KilledEnemiesUISystemBindContainerForSys()},				{typeof(PlayerInventoryUISystem), new PlayerInventoryUISystemBindContainerForSys()},				{typeof(SpawnEnemyHealthUISystem), new SpawnEnemyHealthUISystemBindContainerForSys()},				{typeof(SpawnHealthUISystem), new SpawnHealthUISystemBindContainerForSys()},				{typeof(SpawnInventoryUISystem), new SpawnInventoryUISystemBindContainerForSys()},				{typeof(SpawnKilledEnemiesUISystem), new SpawnKilledEnemiesUISystemBindContainerForSys()},				{typeof(AbilitiesSystem), new AbilitiesSystemBindContainerForSys()},				{typeof(JobUpdateSystem), new JobUpdateSystemBindContainerForSys()},				{typeof(DestroyEntityWorldSystem), new DestroyEntityWorldSystemBindContainerForSys()},				{typeof(PoolingSystem), new PoolingSystemBindContainerForSys()},				{typeof(RemoveComponentWorldSystem), new RemoveComponentWorldSystemBindContainerForSys()},				{typeof(WaitingCommandsSystems), new WaitingCommandsSystemsBindContainerForSys()},				{typeof(AINPCSystem), new AINPCSystemBindContainerForSys()},				{typeof(InputListenSystem), new InputListenSystemBindContainerForSys()},				{typeof(SpawnViewSystem), new SpawnViewSystemBindContainerForSys()},				{typeof(StartSystem), new StartSystemBindContainerForSys()},				{typeof(UpdateActorByTranformSystem), new UpdateActorByTranformSystemBindContainerForSys()},				{typeof(UpdateTranformFromActorSystem), new UpdateTranformFromActorSystemBindContainerForSys()},				{typeof(SoundGlobalSystem), new SoundGlobalSystemBindContainerForSys()},				{typeof(HideUISystem), new HideUISystemBindContainerForSys()},				{typeof(UISystem), new UISystemBindContainerForSys()},				{typeof(CountersHolderSystem), new CountersHolderSystemBindContainerForSys()},				{typeof(StateUpdateSystem), new StateUpdateSystemBindContainerForSys()},				{typeof(StrategiesMainServiceSystem), new StrategiesMainServiceSystemBindContainerForSys()},				{typeof(AnimationDoneCheckOutSystem), new AnimationDoneCheckOutSystemBindContainerForSys()},				{typeof(AnimationSystem), new AnimationSystemBindContainerForSys()},				{typeof(CompositeAbilitiesSystem), new CompositeAbilitiesSystemBindContainerForSys()},				{typeof(ChargeAbilitySystem), new ChargeAbilitySystemBindContainerForSys()},				{typeof(PunchAbilitySystem), new PunchAbilitySystemBindContainerForSys()},				{typeof(RockfallAbilitySystem), new RockfallAbilitySystemBindContainerForSys()},			};		}	}}